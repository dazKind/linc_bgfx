{
    "functions":
    [
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Attachment*"
                },
                {
                    "cname": "_handle",
                    "comment": "Render target texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                },
                {
                    "cname": "_layer",
                    "comment": "Cubemap side or depth layer/slice to use.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of texture layer/slice(s) in array to use.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_resolve",
                    "comment": "Resolve flags. See: `BGFX_RESOLVE_*`",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_attachment_init",
            "comment": "Init attachment.",
            "name": "attachmentInit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_rendererType",
                    "comment": "Renderer backend type. See: `bgfx::RendererType`",
                    "data_type": "RendererType::Enum"
                }
            ],
            "cname": "bgfx_vertex_layout_begin",
            "comment": "Start VertexLayout.",
            "name": "vertexLayoutBegin",
            "return_type": "VertexLayout*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_attrib",
                    "comment": "Attribute semantics. See: `bgfx::Attrib`",
                    "data_type": "Attrib::Enum"
                },
                {
                    "cname": "_num",
                    "comment": "Number of elements 1, 2, 3 or 4.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_type",
                    "comment": "Element type.",
                    "data_type": "AttribType::Enum"
                },
                {
                    "cname": "_normalized",
                    "comment": "When using fixed point AttribType (f.e. Uint8)\nvalue will be normalized for vertex shader usage. When normalized\nis set to true, AttribType::Uint8 value in range 0-255 will be\nin range 0.0-1.0 in vertex shader.",
                    "data_type": "bool"
                },
                {
                    "cname": "_asInt",
                    "comment": "Packaging rule for vertexPack, vertexUnpack, and\nvertexConvert for AttribType::Uint8 and AttribType::Int16.\nUnpacking code must be implemented inside vertex shader.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_vertex_layout_add",
            "comment": "Add attribute to VertexLayout.\n@remarks Must be called between begin/end.",
            "name": "vertexLayoutAdd",
            "return_type": "VertexLayout*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_attrib",
                    "comment": "Attribute semantics. See: `bgfx::Attrib`",
                    "data_type": "Attrib::Enum"
                },
                {
                    "cname": "_num",
                    "comment": "Number of elements.",
                    "data_type": "uint8_t *"
                },
                {
                    "cname": "_type",
                    "comment": "Element type.",
                    "data_type": "AttribType::Enum *"
                },
                {
                    "cname": "_normalized",
                    "comment": "Attribute is normalized.",
                    "data_type": "bool *"
                },
                {
                    "cname": "_asInt",
                    "comment": "Attribute is packed as int.",
                    "data_type": "bool *"
                }
            ],
            "cname": "bgfx_vertex_layout_decode",
            "comment": "Decode attribute.",
            "name": "vertexLayoutDecode",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_attrib",
                    "comment": "Attribute semantics. See: `bgfx::Attrib`",
                    "data_type": "Attrib::Enum"
                }
            ],
            "cname": "bgfx_vertex_layout_has",
            "comment": "Returns `true` if VertexLayout contains attribute.",
            "name": "vertexLayoutHas",
            "return_type": "bool"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of bytes to skip.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_vertex_layout_skip",
            "comment": "Skip `_num` bytes in vertex stream.",
            "name": "vertexLayoutSkip",
            "return_type": "VertexLayout*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                }
            ],
            "cname": "bgfx_vertex_layout_end",
            "comment": "End VertexLayout.",
            "name": "vertexLayoutEnd",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_attrib",
                    "comment": "Attribute semantics. See: `bgfx::Attrib`",
                    "data_type": "Attrib::Enum"
                }
            ],
            "cname": "bgfx_vertex_layout_get_offset",
            "comment": "Returns relative attribute offset from the vertex.",
            "name": "vertexLayoutGetOffset",
            "return_type": "uint16_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                }
            ],
            "cname": "bgfx_vertex_layout_get_stride",
            "comment": "Returns vertex stride.",
            "name": "vertexLayoutGetStride",
            "return_type": "uint16_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "VertexLayout*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of vertices.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_vertex_layout_get_size",
            "comment": "Returns size of vertex buffer for number of vertices.",
            "name": "vertexLayoutGetSize",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_input",
                    "comment": "Value to be packed into vertex stream.",
                    "data_type": "const float"
                },
                {
                    "cname": "_inputNormalized",
                    "comment": "`true` if input value is already normalized.",
                    "data_type": "bool"
                },
                {
                    "cname": "_attr",
                    "comment": "Attribute to pack.",
                    "data_type": "Attrib::Enum"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex stream layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_data",
                    "comment": "Destination vertex stream where data will be packed.",
                    "data_type": "void*"
                },
                {
                    "cname": "_index",
                    "comment": "Vertex index that will be modified.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_vertex_pack",
            "comment": "Pack vertex attribute into vertex stream format.",
            "name": "vertexPack",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_output",
                    "comment": "Result of unpacking.",
                    "data_type": "float"
                },
                {
                    "cname": "_attr",
                    "comment": "Attribute to unpack.",
                    "data_type": "Attrib::Enum"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex stream layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_data",
                    "comment": "Source vertex stream from where data will be unpacked.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_index",
                    "comment": "Vertex index that will be unpacked.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_vertex_unpack",
            "comment": "Unpack vertex attribute from vertex stream format.",
            "name": "vertexUnpack",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_dstLayout",
                    "comment": "Destination vertex stream layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_dstData",
                    "comment": "Destination vertex stream.",
                    "data_type": "void*"
                },
                {
                    "cname": "_srcLayout",
                    "comment": "Source vertex stream layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_srcData",
                    "comment": "Source vertex stream data.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of vertices to convert from source to destination.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_vertex_convert",
            "comment": "Converts vertex stream data from one vertex stream format to another.",
            "name": "vertexConvert",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_output",
                    "comment": "Welded vertices remapping table. The size of buffer\nmust be the same as number of vertices.",
                    "data_type": "void*"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex stream layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_data",
                    "comment": "Vertex stream.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of vertices in vertex stream.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices are 32-bit.",
                    "data_type": "bool"
                },
                {
                    "cname": "_epsilon",
                    "comment": "Error tolerance for vertex position comparison.",
                    "data_type": "float"
                }
            ],
            "cname": "bgfx_weld_vertices",
            "comment": "Weld vertices.",
            "name": "weldVertices",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_conversion",
                    "comment": "Conversion type, see `TopologyConvert::Enum`.",
                    "data_type": "TopologyConvert::Enum"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination index buffer. If this argument is NULL\nfunction will return number of indices after conversion.",
                    "data_type": "void*"
                },
                {
                    "cname": "_dstSize",
                    "comment": "Destination index buffer in bytes. It must be\nlarge enough to contain output indices. If destination size is\ninsufficient index buffer will be truncated.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_indices",
                    "comment": "Source indices.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of input indices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices are 32-bit.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_topology_convert",
            "comment": "Convert index buffer for use with different primitive topologies.",
            "name": "topologyConvert",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_sort",
                    "comment": "Sort order, see `TopologySort::Enum`.",
                    "data_type": "TopologySort::Enum"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination index buffer.",
                    "data_type": "void*"
                },
                {
                    "cname": "_dstSize",
                    "comment": "Destination index buffer in bytes. It must be\nlarge enough to contain output indices. If destination size is\ninsufficient index buffer will be truncated.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_dir",
                    "comment": "Direction (vector must be normalized).",
                    "data_type": "const float"
                },
                {
                    "cname": "_pos",
                    "comment": "Position.",
                    "data_type": "const float"
                },
                {
                    "cname": "_vertices",
                    "comment": "Pointer to first vertex represented as\nfloat x, y, z. Must contain at least number of vertices\nreferencende by index buffer.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_stride",
                    "comment": "Vertex stride.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_indices",
                    "comment": "Source indices.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of input indices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices are 32-bit.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_topology_sort_tri_list",
            "comment": "Sort indices.",
            "name": "topologySortTriList",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_max",
                    "comment": "Maximum number of elements in _enum array.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_enum",
                    "comment": "Array where supported renderers will be written.",
                    "data_type": "RendererType::Enum*"
                }
            ],
            "cname": "bgfx_get_supported_renderers",
            "comment": "Returns supported backend API renderers.",
            "name": "getSupportedRenderers",
            "return_type": "uint8_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_type",
                    "comment": "Renderer backend type. See: `bgfx::RendererType`",
                    "data_type": "RendererType::Enum"
                }
            ],
            "cname": "bgfx_get_renderer_name",
            "comment": "Returns name of renderer.",
            "name": "getRendererName",
            "return_type": "const char*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_init",
                    "comment": "Pointer to structure to be initialized. See: `bgfx::Init` for more info.",
                    "data_type": "Init*"
                }
            ],
            "cname": "bgfx_init_ctor",
            "comment": "Fill bgfx::Init struct with default values, before using it to initialize the library.",
            "name": "initCtor",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_init",
                    "comment": "Initialization parameters. See: `bgfx::Init` for more info.",
                    "data_type": "const Init *"
                }
            ],
            "cname": "bgfx_init",
            "comment": "Initialize the bgfx library.",
            "name": "init",
            "return_type": "bool"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_shutdown",
            "comment": "Shutdown bgfx library.",
            "name": "shutdown",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_width",
                    "comment": "Back-buffer width.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_height",
                    "comment": "Back-buffer height.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "See: `BGFX_RESET_*` for more info.\n  - `BGFX_RESET_NONE` - No reset flags.\n  - `BGFX_RESET_FULLSCREEN` - Not supported yet.\n  - `BGFX_RESET_MSAA_X[2/4/8/16]` - Enable 2, 4, 8 or 16 x MSAA.\n  - `BGFX_RESET_VSYNC` - Enable V-Sync.\n  - `BGFX_RESET_MAXANISOTROPY` - Turn on/off max anisotropy.\n  - `BGFX_RESET_CAPTURE` - Begin screen capture.\n  - `BGFX_RESET_FLUSH_AFTER_RENDER` - Flush rendering after submitting to GPU.\n  - `BGFX_RESET_FLIP_AFTER_RENDER` - This flag  specifies where flip\n    occurs. Default behaviour is that flip occurs before rendering new\n    frame. This flag only has effect when `BGFX_CONFIG_MULTITHREADED=0`.\n  - `BGFX_RESET_SRGB_BACKBUFFER` - Enable sRGB back-buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                }
            ],
            "cname": "bgfx_reset",
            "comment": "Reset graphic settings and back-buffer size.\n@attention This call doesn’t change the window size, it just resizes\n  the back-buffer. Your windowing code controls the window size.",
            "name": "reset",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_capture",
                    "comment": "Capture frame with graphics debugger.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_frame",
            "comment": "Advance to next frame. When using multithreaded renderer, this call\njust swaps internal buffers, kicks render thread, and returns. In\nsinglethreaded renderer this call does frame rendering.",
            "name": "frame",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_get_renderer_type",
            "comment": "Returns current renderer backend API type.\n@remarks\n  Library must be initialized.",
            "name": "getRendererType",
            "return_type": "RendererType::Enum"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_get_caps",
            "comment": "Returns renderer capabilities.\n@remarks\n  Library must be initialized.",
            "name": "getCaps",
            "return_type": "const Caps*"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_get_stats",
            "comment": "Returns performance counters.\n@attention Pointer returned is valid until `bgfx::frame` is called.",
            "name": "getStats",
            "return_type": "const Stats*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_size",
                    "comment": "Size to allocate.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_alloc",
            "comment": "Allocate buffer to pass to bgfx calls. Data will be freed inside bgfx.",
            "name": "alloc",
            "return_type": "const Memory*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_data",
                    "comment": "Pointer to data to be copied.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_size",
                    "comment": "Size of data to be copied.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_copy",
            "comment": "Allocate buffer and copy data into it. Data will be freed inside bgfx.",
            "name": "copy",
            "return_type": "const Memory*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_data",
                    "comment": "Pointer to data.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_size",
                    "comment": "Size of data.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_make_ref",
            "comment": "Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call\ndoesn't allocate memory for data. It just copies the _data pointer. You\ncan pass `ReleaseFn` function pointer to release this memory after it's\nconsumed, otherwise you must make sure _data is available for at least 2\n`bgfx::frame` calls. `ReleaseFn` function must be able to be called\nfrom any thread.\n@attention Data passed must be available for at least 2 `bgfx::frame` calls.",
            "name": "makeRef",
            "return_type": "const Memory*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_data",
                    "comment": "Pointer to data.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_size",
                    "comment": "Size of data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_releaseFn",
                    "comment": "Callback function to release memory after use.",
                    "data_type": "ReleaseFn"
                },
                {
                    "cname": "_userData",
                    "comment": "User data to be passed to callback function.",
                    "data_type": "void*"
                }
            ],
            "cname": "bgfx_make_ref_release",
            "comment": "Make reference to data to pass to bgfx. Unlike `bgfx::alloc`, this call\ndoesn't allocate memory for data. It just copies the _data pointer. You\ncan pass `ReleaseFn` function pointer to release this memory after it's\nconsumed, otherwise you must make sure _data is available for at least 2\n`bgfx::frame` calls. `ReleaseFn` function must be able to be called\nfrom any thread.\n@attention Data passed must be available for at least 2 `bgfx::frame` calls.",
            "name": "makeRefRelease",
            "return_type": "const Memory*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_debug",
                    "comment": "Available flags:\n  - `BGFX_DEBUG_IFH` - Infinitely fast hardware. When this flag is set\n    all rendering calls will be skipped. This is useful when profiling\n    to quickly assess potential bottlenecks between CPU and GPU.\n  - `BGFX_DEBUG_PROFILER` - Enable profiler.\n  - `BGFX_DEBUG_STATS` - Display internal statistics.\n  - `BGFX_DEBUG_TEXT` - Display debug text.\n  - `BGFX_DEBUG_WIREFRAME` - Wireframe rendering. All rendering\n    primitives will be rendered as lines.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_debug",
            "comment": "Set debug flags.",
            "name": "setDebug",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_attr",
                    "comment": "Background color.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_small",
                    "comment": "Default 8x16 or 8x8 font.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_dbg_text_clear",
            "comment": "Clear internal debug text buffer.",
            "name": "dbgTextClear",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_attr",
                    "comment": "Color palette. Where top 4-bits represent index of background, and bottom\n4-bits represent foreground color from standard VGA text palette (ANSI escape codes).",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_format",
                    "comment": "`printf` style format.",
                    "data_type": "const char*"
                },
                {
                    "cname": "",
                    "data_type": "..."
                }
            ],
            "cname": "bgfx_dbg_text_printf",
            "comment": "Print formatted data to internal debug text character-buffer (VGA-compatible text mode).",
            "name": "dbgTextPrintf",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_attr",
                    "comment": "Color palette. Where top 4-bits represent index of background, and bottom\n4-bits represent foreground color from standard VGA text palette (ANSI escape codes).",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_format",
                    "comment": "`printf` style format.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_argList",
                    "comment": "Variable arguments list for format string.",
                    "data_type": "va_list"
                }
            ],
            "cname": "bgfx_dbg_text_vprintf",
            "comment": "Print formatted data from variable argument list to internal debug text character-buffer (VGA-compatible text mode).",
            "name": "dbgTextVprintf",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Image width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Image height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_data",
                    "comment": "Raw image data (character/attribute raw encoding).",
                    "data_type": "const void*"
                },
                {
                    "cname": "_pitch",
                    "comment": "Image pitch in bytes.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_dbg_text_image",
            "comment": "Draw image into internal debug text buffer.",
            "name": "dbgTextImage",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "Index buffer data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n  - `BGFX_BUFFER_NONE` - No flags.\n  - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n  - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n      is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n  - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n  - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n      data is passed. If this flag is not specified, and more data is passed on update, the buffer\n      will be trimmed to fit the existing buffer size. This flag has effect only on dynamic\n      buffers.\n  - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on\n      index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_index_buffer",
            "comment": "Create static index buffer.",
            "name": "createIndexBuffer",
            "return_type": "IndexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Static index buffer handle.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_name",
                    "comment": "Static index buffer name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Static index buffer name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_index_buffer_name",
            "comment": "Set static index buffer debug name.",
            "name": "setIndexBufferName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Static index buffer handle.",
                    "data_type": "IndexBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_index_buffer",
            "comment": "Destroy static index buffer.",
            "name": "destroyIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout *"
                }
            ],
            "cname": "bgfx_create_vertex_layout",
            "comment": "Create vertex layout.",
            "name": "createVertexLayout",
            "return_type": "VertexLayoutHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout handle.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_destroy_vertex_layout",
            "comment": "Destroy vertex layout.",
            "name": "destroyVertexLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "Vertex buffer data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n - `BGFX_BUFFER_NONE` - No flags.\n - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n     is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n     data is passed. If this flag is not specified, and more data is passed on update, the buffer\n     will be trimmed to fit the existing buffer size. This flag has effect only on dynamic buffers.\n - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_vertex_buffer",
            "comment": "Create static vertex buffer.",
            "name": "createVertexBuffer",
            "return_type": "VertexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Static vertex buffer handle.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_name",
                    "comment": "Static vertex buffer name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Static vertex buffer name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_vertex_buffer_name",
            "comment": "Set static vertex buffer debug name.",
            "name": "setVertexBufferName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Static vertex buffer handle.",
                    "data_type": "VertexBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_vertex_buffer",
            "comment": "Destroy static vertex buffer.",
            "name": "destroyVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of indices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n  - `BGFX_BUFFER_NONE` - No flags.\n  - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n  - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n      is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n  - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n  - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n      data is passed. If this flag is not specified, and more data is passed on update, the buffer\n      will be trimmed to fit the existing buffer size. This flag has effect only on dynamic\n      buffers.\n  - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on\n      index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_dynamic_index_buffer",
            "comment": "Create empty dynamic index buffer.",
            "name": "createDynamicIndexBuffer",
            "return_type": "DynamicIndexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "Index buffer data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n  - `BGFX_BUFFER_NONE` - No flags.\n  - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n  - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n      is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n  - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n  - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n      data is passed. If this flag is not specified, and more data is passed on update, the buffer\n      will be trimmed to fit the existing buffer size. This flag has effect only on dynamic\n      buffers.\n  - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on\n      index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_dynamic_index_buffer_mem",
            "comment": "Create a dynamic index buffer and initialize it.",
            "name": "createDynamicIndexBufferMem",
            "return_type": "DynamicIndexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer handle.",
                    "data_type": "DynamicIndexBufferHandle"
                },
                {
                    "cname": "_startIndex",
                    "comment": "Start index.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Index buffer data.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_update_dynamic_index_buffer",
            "comment": "Update dynamic index buffer.",
            "name": "updateDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer handle.",
                    "data_type": "DynamicIndexBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_dynamic_index_buffer",
            "comment": "Destroy dynamic index buffer.",
            "name": "destroyDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of vertices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout*"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n  - `BGFX_BUFFER_NONE` - No flags.\n  - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n  - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n      is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n  - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n  - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n      data is passed. If this flag is not specified, and more data is passed on update, the buffer\n      will be trimmed to fit the existing buffer size. This flag has effect only on dynamic\n      buffers.\n  - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on\n      index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_dynamic_vertex_buffer",
            "comment": "Create empty dynamic vertex buffer.",
            "name": "createDynamicVertexBuffer",
            "return_type": "DynamicVertexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "Vertex buffer data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout*"
                },
                {
                    "cname": "_flags",
                    "comment": "Buffer creation flags.\n  - `BGFX_BUFFER_NONE` - No flags.\n  - `BGFX_BUFFER_COMPUTE_READ` - Buffer will be read from by compute shader.\n  - `BGFX_BUFFER_COMPUTE_WRITE` - Buffer will be written into by compute shader. When buffer\n      is created with `BGFX_BUFFER_COMPUTE_WRITE` flag it cannot be updated from CPU.\n  - `BGFX_BUFFER_COMPUTE_READ_WRITE` - Buffer will be used for read/write by compute shader.\n  - `BGFX_BUFFER_ALLOW_RESIZE` - Buffer will resize on buffer update if a different amount of\n      data is passed. If this flag is not specified, and more data is passed on update, the buffer\n      will be trimmed to fit the existing buffer size. This flag has effect only on dynamic\n      buffers.\n  - `BGFX_BUFFER_INDEX32` - Buffer is using 32-bit indices. This flag has effect only on\n      index buffers.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_dynamic_vertex_buffer_mem",
            "comment": "Create dynamic vertex buffer and initialize it.",
            "name": "createDynamicVertexBufferMem",
            "return_type": "DynamicVertexBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer handle.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "Start vertex.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Vertex buffer data.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_update_dynamic_vertex_buffer",
            "comment": "Update dynamic vertex buffer.",
            "name": "updateDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer handle.",
                    "data_type": "DynamicVertexBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_dynamic_vertex_buffer",
            "comment": "Destroy dynamic vertex buffer.",
            "name": "destroyDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of required indices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices will be 32-bit.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_get_avail_transient_index_buffer",
            "comment": "Returns number of requested or maximum available indices.",
            "name": "getAvailTransientIndexBuffer",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of required vertices.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout *"
                }
            ],
            "cname": "bgfx_get_avail_transient_vertex_buffer",
            "comment": "Returns number of requested or maximum available vertices.",
            "name": "getAvailTransientVertexBuffer",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of required instances.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_stride",
                    "comment": "Stride per instance.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_get_avail_instance_data_buffer",
            "comment": "Returns number of requested or maximum available instance buffer slots.",
            "name": "getAvailInstanceDataBuffer",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_tib",
                    "comment": "TransientIndexBuffer structure will be filled, and will be valid\nfor the duration of frame, and can be reused for multiple draw\ncalls.",
                    "data_type": "TransientIndexBuffer*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of indices to allocate.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices will be 32-bit.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_alloc_transient_index_buffer",
            "comment": "Allocate transient index buffer.",
            "name": "allocTransientIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_tvb",
                    "comment": "TransientVertexBuffer structure will be filled, and will be valid\nfor the duration of frame, and can be reused for multiple draw\ncalls.",
                    "data_type": "TransientVertexBuffer*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of vertices to allocate.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout *"
                }
            ],
            "cname": "bgfx_alloc_transient_vertex_buffer",
            "comment": "Allocate transient vertex buffer.",
            "name": "allocTransientVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_tvb",
                    "comment": "TransientVertexBuffer structure will be filled, and will be valid\nfor the duration of frame, and can be reused for multiple draw\ncalls.",
                    "data_type": "TransientVertexBuffer*"
                },
                {
                    "cname": "_layout",
                    "comment": "Vertex layout.",
                    "data_type": "const VertexLayout *"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to allocate.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_tib",
                    "comment": "TransientIndexBuffer structure will be filled, and will be valid\nfor the duration of frame, and can be reused for multiple draw\ncalls.",
                    "data_type": "TransientIndexBuffer*"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to allocate.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_index32",
                    "comment": "Set to `true` if input indices will be 32-bit.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_alloc_transient_buffers",
            "comment": "Check for required space and allocate transient vertex and index\nbuffers. If both space requirements are satisfied function returns\ntrue.",
            "name": "allocTransientBuffers",
            "return_type": "bool"
        },
        {
            "arguments":
            [
                {
                    "cname": "_idb",
                    "comment": "InstanceDataBuffer structure will be filled, and will be valid\nfor duration of frame, and can be reused for multiple draw\ncalls.",
                    "data_type": "InstanceDataBuffer*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of instances.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_stride",
                    "comment": "Instance stride. Must be multiple of 16.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_alloc_instance_data_buffer",
            "comment": "Allocate instance data buffer.",
            "name": "allocInstanceDataBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of indirect calls.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_create_indirect_buffer",
            "comment": "Create draw indirect buffer.",
            "name": "createIndirectBuffer",
            "return_type": "IndirectBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Indirect buffer handle.",
                    "data_type": "IndirectBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_indirect_buffer",
            "comment": "Destroy draw indirect buffer.",
            "name": "destroyIndirectBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "Shader binary.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_create_shader",
            "comment": "Create shader from memory buffer.\n@remarks\n  Shader binary is obtained by compiling shader offline with shaderc command line tool.",
            "name": "createShader",
            "return_type": "ShaderHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Shader handle.",
                    "data_type": "ShaderHandle"
                },
                {
                    "cname": "_uniforms",
                    "comment": "UniformHandle array where data will be stored.",
                    "data_type": "UniformHandle*"
                },
                {
                    "cname": "_max",
                    "comment": "Maximum capacity of array.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_get_shader_uniforms",
            "comment": "Returns the number of uniforms and uniform handles used inside a shader.\n@remarks\n  Only non-predefined uniforms are returned.",
            "name": "getShaderUniforms",
            "return_type": "uint16_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Shader handle.",
                    "data_type": "ShaderHandle"
                },
                {
                    "cname": "_name",
                    "comment": "Shader name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Shader name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string).",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_shader_name",
            "comment": "Set shader debug name.",
            "name": "setShaderName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Shader handle.",
                    "data_type": "ShaderHandle"
                }
            ],
            "cname": "bgfx_destroy_shader",
            "comment": "Destroy shader.\n@remark Once a shader program is created with _handle,\n  it is safe to destroy that shader.",
            "name": "destroyShader",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_vsh",
                    "comment": "Vertex shader.",
                    "data_type": "ShaderHandle"
                },
                {
                    "cname": "_fsh",
                    "comment": "Fragment shader.",
                    "data_type": "ShaderHandle"
                },
                {
                    "cname": "_destroyShaders",
                    "comment": "If true, shaders will be destroyed when program is destroyed.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_create_program",
            "comment": "Create program with vertex and fragment shaders.",
            "name": "createProgram",
            "return_type": "ProgramHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_csh",
                    "comment": "Compute shader.",
                    "data_type": "ShaderHandle"
                },
                {
                    "cname": "_destroyShaders",
                    "comment": "If true, shaders will be destroyed when program is destroyed.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_create_compute_program",
            "comment": "Create program with compute shader.",
            "name": "createComputeProgram",
            "return_type": "ProgramHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Program handle.",
                    "data_type": "ProgramHandle"
                }
            ],
            "cname": "bgfx_destroy_program",
            "comment": "Destroy program.",
            "name": "destroyProgram",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_depth",
                    "comment": "Depth dimension of volume texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_cubeMap",
                    "comment": "Indicates that texture contains cubemap.",
                    "data_type": "bool"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of layers in texture array.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture flags. See `BGFX_TEXTURE_*`.",
                    "data_type": "uint64_t"
                }
            ],
            "cname": "bgfx_is_texture_valid",
            "comment": "Validate texture parameters.",
            "name": "isTextureValid",
            "return_type": "bool"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of attachments.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_attachment",
                    "comment": "Attachment texture info. See: `bgfx::Attachment`.",
                    "data_type": "const Attachment*"
                }
            ],
            "cname": "bgfx_is_frame_buffer_valid",
            "comment": "Validate frame buffer parameters.",
            "name": "isFrameBufferValid",
            "return_type": "bool"
        },
        {
            "arguments":
            [
                {
                    "cname": "_info",
                    "comment": "Resulting texture info structure. See: `TextureInfo`.",
                    "data_type": "TextureInfo *"
                },
                {
                    "cname": "_width",
                    "comment": "Width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth dimension of volume texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_cubeMap",
                    "comment": "Indicates that texture contains cubemap.",
                    "data_type": "bool"
                },
                {
                    "cname": "_hasMips",
                    "comment": "Indicates that texture contains full mip-map chain.",
                    "data_type": "bool"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of layers in texture array.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                }
            ],
            "cname": "bgfx_calc_texture_size",
            "comment": "Calculate amount of memory required for texture.",
            "name": "calcTextureSize",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mem",
                    "comment": "DDS, KTX or PVR texture binary data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_skip",
                    "comment": "Skip top level mips when parsing texture.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_info",
                    "comment": "When non-`NULL` is specified it returns parsed texture information.",
                    "data_type": "TextureInfo*"
                }
            ],
            "cname": "bgfx_create_texture",
            "comment": "Create texture from memory buffer.",
            "name": "createTexture",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_width",
                    "comment": "Width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_hasMips",
                    "comment": "Indicates that texture contains full mip-map chain.",
                    "data_type": "bool"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of layers in texture array. Must be 1 if caps\n`BGFX_CAPS_TEXTURE_2D_ARRAY` flag is not set.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture data. If `_mem` is non-NULL, created texture will be immutable. If\n`_mem` is NULL content of the texture is uninitialized. When `_numLayers` is more than\n1, expected memory layout is texture and all mips together for each array element.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_create_texture_2d",
            "comment": "Create 2D texture.",
            "name": "createTexture2d",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_ratio",
                    "comment": "Texture size in respect to back-buffer size. See: `BackbufferRatio::Enum`.",
                    "data_type": "BackbufferRatio::Enum"
                },
                {
                    "cname": "_hasMips",
                    "comment": "Indicates that texture contains full mip-map chain.",
                    "data_type": "bool"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of layers in texture array. Must be 1 if caps\n`BGFX_CAPS_TEXTURE_2D_ARRAY` flag is not set.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                }
            ],
            "cname": "bgfx_create_texture_2d_scaled",
            "comment": "Create texture with size based on back-buffer ratio. Texture will maintain ratio\nif back buffer resolution changes.",
            "name": "createTexture2dScaled",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_width",
                    "comment": "Width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_hasMips",
                    "comment": "Indicates that texture contains full mip-map chain.",
                    "data_type": "bool"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture data. If `_mem` is non-NULL, created texture will be immutable. If\n`_mem` is NULL content of the texture is uninitialized. When `_numLayers` is more than\n1, expected memory layout is texture and all mips together for each array element.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_create_texture_3d",
            "comment": "Create 3D texture.",
            "name": "createTexture3d",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_size",
                    "comment": "Cube side size.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_hasMips",
                    "comment": "Indicates that texture contains full mip-map chain.",
                    "data_type": "bool"
                },
                {
                    "cname": "_numLayers",
                    "comment": "Number of layers in texture array. Must be 1 if caps\n`BGFX_CAPS_TEXTURE_2D_ARRAY` flag is not set.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture data. If `_mem` is non-NULL, created texture will be immutable. If\n`_mem` is NULL content of the texture is uninitialized. When `_numLayers` is more than\n1, expected memory layout is texture and all mips together for each array element.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_create_texture_cube",
            "comment": "Create Cube texture.",
            "name": "createTextureCube",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_layer",
                    "comment": "Layer in texture array.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_x",
                    "comment": "X offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Y offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture update data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_pitch",
                    "comment": "Pitch of input image (bytes). When _pitch is set to\nUINT16_MAX, it will be calculated internally based on _width.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_update_texture_2d",
            "comment": "Update 2D texture.\n@attention It's valid to update only mutable texture. See `bgfx::createTexture2D` for more info.",
            "name": "updateTexture2d",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_x",
                    "comment": "X offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Y offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_z",
                    "comment": "Z offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture update data.",
                    "data_type": "const Memory*"
                }
            ],
            "cname": "bgfx_update_texture_3d",
            "comment": "Update 3D texture.\n@attention It's valid to update only mutable texture. See `bgfx::createTexture3D` for more info.",
            "name": "updateTexture3d",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_layer",
                    "comment": "Layer in texture array.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_side",
                    "comment": "Cubemap side `BGFX_CUBE_MAP_<POSITIVE or NEGATIVE>_<X, Y or Z>`,\n  where 0 is +X, 1 is -X, 2 is +Y, 3 is -Y, 4 is +Z, and 5 is -Z.\n                 +----------+\n                 |-z       2|\n                 | ^  +y    |\n                 | |        |    Unfolded cube:\n                 | +---->+x |\n      +----------+----------+----------+----------+\n      |+y       1|+y       4|+y       0|+y       5|\n      | ^  -x    | ^  +z    | ^  +x    | ^  -z    |\n      | |        | |        | |        | |        |\n      | +---->+z | +---->+x | +---->-z | +---->-x |\n      +----------+----------+----------+----------+\n                 |+z       3|\n                 | ^  -y    |\n                 | |        |\n                 | +---->+x |\n                 +----------+",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_x",
                    "comment": "X offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Y offset in texture.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of texture block.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_mem",
                    "comment": "Texture update data.",
                    "data_type": "const Memory*"
                },
                {
                    "cname": "_pitch",
                    "comment": "Pitch of input image (bytes). When _pitch is set to\nUINT16_MAX, it will be calculated internally based on _width.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_update_texture_cube",
            "comment": "Update Cube texture.\n@attention It's valid to update only mutable texture. See `bgfx::createTextureCube` for more info.",
            "name": "updateTextureCube",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_data",
                    "comment": "Destination buffer.",
                    "data_type": "void*"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_read_texture",
            "comment": "Read back texture content.\n@attention Texture must be created with `BGFX_TEXTURE_READ_BACK` flag.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_READ_BACK`.",
            "name": "readTexture",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_name",
                    "comment": "Texture name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Texture name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_texture_name",
            "comment": "Set texture debug name.",
            "name": "setTextureName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                }
            ],
            "cname": "bgfx_get_direct_access_ptr",
            "comment": "Returns texture direct access pointer.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_DIRECT_ACCESS`. This feature\n  is available on GPUs that have unified memory architecture (UMA) support.",
            "name": "getDirectAccessPtr",
            "return_type": "void*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                }
            ],
            "cname": "bgfx_destroy_texture",
            "comment": "Destroy texture.",
            "name": "destroyTexture",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_width",
                    "comment": "Texture width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Texture height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_textureFlags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                }
            ],
            "cname": "bgfx_create_frame_buffer",
            "comment": "Create frame buffer (simple).",
            "name": "createFrameBuffer",
            "return_type": "FrameBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_ratio",
                    "comment": "Frame buffer size in respect to back-buffer size. See:\n`BackbufferRatio::Enum`.",
                    "data_type": "BackbufferRatio::Enum"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_textureFlags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                }
            ],
            "cname": "bgfx_create_frame_buffer_scaled",
            "comment": "Create frame buffer with size based on back-buffer ratio. Frame buffer will maintain ratio\nif back buffer resolution changes.",
            "name": "createFrameBufferScaled",
            "return_type": "FrameBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of texture handles.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handles",
                    "comment": "Texture attachments.",
                    "data_type": "const TextureHandle*"
                },
                {
                    "cname": "_destroyTexture",
                    "comment": "If true, textures will be destroyed when\nframe buffer is destroyed.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_create_frame_buffer_from_handles",
            "comment": "Create MRT frame buffer from texture handles (simple).",
            "name": "createFrameBufferFromHandles",
            "return_type": "FrameBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_num",
                    "comment": "Number of attachments.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_attachment",
                    "comment": "Attachment texture info. See: `bgfx::Attachment`.",
                    "data_type": "const Attachment*"
                },
                {
                    "cname": "_destroyTexture",
                    "comment": "If true, textures will be destroyed when\nframe buffer is destroyed.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_create_frame_buffer_from_attachment",
            "comment": "Create MRT frame buffer from texture handles with specific layer and\nmip level.",
            "name": "createFrameBufferFromAttachment",
            "return_type": "FrameBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_nwh",
                    "comment": "OS' target native window handle.",
                    "data_type": "void*"
                },
                {
                    "cname": "_width",
                    "comment": "Window back buffer width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Window back buffer height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_format",
                    "comment": "Window back buffer color format.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_depthFormat",
                    "comment": "Window back buffer depth format.",
                    "data_type": "TextureFormat::Enum"
                }
            ],
            "cname": "bgfx_create_frame_buffer_from_nwh",
            "comment": "Create frame buffer for multiple window rendering.\n@remarks\n  Frame buffer cannot be used for sampling.\n@attention Availability depends on: `BGFX_CAPS_SWAP_CHAIN`.",
            "name": "createFrameBufferFromNwh",
            "return_type": "FrameBufferHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Frame buffer handle.",
                    "data_type": "FrameBufferHandle"
                },
                {
                    "cname": "_name",
                    "comment": "Frame buffer name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Frame buffer name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_frame_buffer_name",
            "comment": "Set frame buffer debug name.",
            "name": "setFrameBufferName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Frame buffer handle.",
                    "data_type": "FrameBufferHandle"
                },
                {
                    "cname": "_attachment",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_get_texture",
            "comment": "Obtain texture handle of frame buffer attachment.",
            "name": "getTexture",
            "return_type": "TextureHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Frame buffer handle.",
                    "data_type": "FrameBufferHandle"
                }
            ],
            "cname": "bgfx_destroy_frame_buffer",
            "comment": "Destroy frame buffer.",
            "name": "destroyFrameBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_name",
                    "comment": "Uniform name in shader.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_type",
                    "comment": "Type of uniform (See: `bgfx::UniformType`).",
                    "data_type": "UniformType::Enum"
                },
                {
                    "cname": "_num",
                    "comment": "Number of elements in array.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_create_uniform",
            "comment": "Create shader uniform parameter.\n@remarks\n  1. Uniform names are unique. It's valid to call `bgfx::createUniform`\n     multiple times with the same uniform name. The library will always\n     return the same handle, but the handle reference count will be\n     incremented. This means that the same number of `bgfx::destroyUniform`\n     must be called to properly destroy the uniform.\n  2. Predefined uniforms (declared in `bgfx_shader.sh`):\n     - `u_viewRect vec4(x, y, width, height)` - view rectangle for current\n       view, in pixels.\n     - `u_viewTexel vec4(1.0/width, 1.0/height, undef, undef)` - inverse\n       width and height\n     - `u_view mat4` - view matrix\n     - `u_invView mat4` - inverted view matrix\n     - `u_proj mat4` - projection matrix\n     - `u_invProj mat4` - inverted projection matrix\n     - `u_viewProj mat4` - concatenated view projection matrix\n     - `u_invViewProj mat4` - concatenated inverted view projection matrix\n     - `u_model mat4[BGFX_CONFIG_MAX_BONES]` - array of model matrices.\n     - `u_modelView mat4` - concatenated model view matrix, only first\n       model matrix from array is used.\n     - `u_modelViewProj mat4` - concatenated model view projection matrix.\n     - `u_alphaRef float` - alpha reference value for alpha test.",
            "name": "createUniform",
            "return_type": "UniformHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Handle to uniform object.",
                    "data_type": "UniformHandle"
                },
                {
                    "cname": "_info",
                    "comment": "Uniform info.",
                    "data_type": "UniformInfo *"
                }
            ],
            "cname": "bgfx_get_uniform_info",
            "comment": "Retrieve uniform info.",
            "name": "getUniformInfo",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Handle to uniform object.",
                    "data_type": "UniformHandle"
                }
            ],
            "cname": "bgfx_destroy_uniform",
            "comment": "Destroy shader uniform parameter.",
            "name": "destroyUniform",
            "return_type": "void"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_create_occlusion_query",
            "comment": "Create occlusion query.",
            "name": "createOcclusionQuery",
            "return_type": "OcclusionQueryHandle"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Handle to occlusion query object.",
                    "data_type": "OcclusionQueryHandle"
                },
                {
                    "cname": "_result",
                    "comment": "Number of pixels that passed test. This argument\ncan be `NULL` if result of occlusion query is not needed.",
                    "data_type": "int32_t*"
                }
            ],
            "cname": "bgfx_get_result",
            "comment": "Retrieve occlusion query result from previous frame.",
            "name": "getResult",
            "return_type": "OcclusionQueryResult::Enum"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Handle to occlusion query object.",
                    "data_type": "OcclusionQueryHandle"
                }
            ],
            "cname": "bgfx_destroy_occlusion_query",
            "comment": "Destroy occlusion query.",
            "name": "destroyOcclusionQuery",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_index",
                    "comment": "Index into palette.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_rgba",
                    "comment": "RGBA floating point values.",
                    "data_type": "const float"
                }
            ],
            "cname": "bgfx_set_palette_color",
            "comment": "Set palette color value.",
            "name": "setPaletteColor",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_index",
                    "comment": "Index into palette.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_rgba",
                    "comment": "Packed 32-bit RGBA value.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_palette_color_rgba8",
            "comment": "Set palette color value.",
            "name": "setPaletteColorRgba8",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_name",
                    "comment": "View name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "View name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_view_name",
            "comment": "Set view name.\n@remarks\n  This is debug only feature.\n  In graphics debugger view name will appear as:\n      \"nnnc <view name>\"\n       ^  ^ ^\n       |  +--- compute (C)\n       +------ view id",
            "name": "setViewName",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of view port region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of view port region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_view_rect",
            "comment": "Set view rectangle. Draw primitive outside view will be clipped.",
            "name": "setViewRect",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_ratio",
                    "comment": "Width and height will be set in respect to back-buffer size.\nSee: `BackbufferRatio::Enum`.",
                    "data_type": "BackbufferRatio::Enum"
                }
            ],
            "cname": "bgfx_set_view_rect_ratio",
            "comment": "Set view rectangle. Draw primitive outside view will be clipped.",
            "name": "setViewRectRatio",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of view scissor region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of view scissor region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_view_scissor",
            "comment": "Set view scissor. Draw primitive outside view will be clipped. When\n_x, _y, _width and _height are set to 0, scissor will be disabled.",
            "name": "setViewScissor",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_flags",
                    "comment": "Clear flags. Use `BGFX_CLEAR_NONE` to remove any clear\noperation. See: `BGFX_CLEAR_*`.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_rgba",
                    "comment": "Color clear value.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth clear value.",
                    "data_type": "float"
                },
                {
                    "cname": "_stencil",
                    "comment": "Stencil clear value.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_set_view_clear",
            "comment": "Set view clear flags.",
            "name": "setViewClear",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_flags",
                    "comment": "Clear flags. Use `BGFX_CLEAR_NONE` to remove any clear\noperation. See: `BGFX_CLEAR_*`.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth clear value.",
                    "data_type": "float"
                },
                {
                    "cname": "_stencil",
                    "comment": "Stencil clear value.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c0",
                    "comment": "Palette index for frame buffer attachment 0.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c1",
                    "comment": "Palette index for frame buffer attachment 1.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c2",
                    "comment": "Palette index for frame buffer attachment 2.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c3",
                    "comment": "Palette index for frame buffer attachment 3.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c4",
                    "comment": "Palette index for frame buffer attachment 4.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c5",
                    "comment": "Palette index for frame buffer attachment 5.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c6",
                    "comment": "Palette index for frame buffer attachment 6.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_c7",
                    "comment": "Palette index for frame buffer attachment 7.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_set_view_clear_mrt",
            "comment": "Set view clear flags with different clear color for each\nframe buffer texture. `bgfx::setPaletteColor` must be used to set up a\nclear color palette.",
            "name": "setViewClearMrt",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_mode",
                    "comment": "View sort mode. See `ViewMode::Enum`.",
                    "data_type": "ViewMode::Enum"
                }
            ],
            "cname": "bgfx_set_view_mode",
            "comment": "Set view sorting mode.\n@remarks\n  View mode must be set prior calling `bgfx::submit` for the view.",
            "name": "setViewMode",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_handle",
                    "comment": "Frame buffer handle. Passing `BGFX_INVALID_HANDLE` as\nframe buffer handle will draw primitives from this view into\ndefault back buffer.",
                    "data_type": "FrameBufferHandle"
                }
            ],
            "cname": "bgfx_set_view_frame_buffer",
            "comment": "Set view frame buffer.\n@remarks\n  Not persistent after `bgfx::reset` call.",
            "name": "setViewFrameBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_view",
                    "comment": "View matrix.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_proj",
                    "comment": "Projection matrix.",
                    "data_type": "const void*"
                }
            ],
            "cname": "bgfx_set_view_transform",
            "comment": "Set view's view matrix and projection matrix,\nall draw primitives in this view will use these two matrices.",
            "name": "setViewTransform",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "First view id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_num",
                    "comment": "Number of views to remap.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_order",
                    "comment": "View remap id table. Passing `NULL` will reset view ids\nto default state.",
                    "data_type": "const ViewId*"
                }
            ],
            "cname": "bgfx_set_view_order",
            "comment": "Post submit view reordering.",
            "name": "setViewOrder",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "data_type": "ViewId"
                }
            ],
            "cname": "bgfx_reset_view",
            "comment": "Reset all view settings to default.",
            "name": "resetView",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_forThread",
                    "comment": "Explicitly request an encoder for a worker thread.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_encoder_begin",
            "comment": "Begin submitting draw calls from thread.",
            "name": "encoderBegin",
            "return_type": "Encoder*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_encoder",
                    "comment": "Encoder.",
                    "data_type": "Encoder*"
                }
            ],
            "cname": "bgfx_encoder_end",
            "comment": "End submitting draw calls from thread.",
            "name": "encoderEnd",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_name",
                    "comment": "Marker name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Marker name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_encoder_set_marker",
            "comment": "Sets a debug marker. This allows you to group graphics calls together for easy browsing in\ngraphics debugging tools.",
            "name": "encoderSetMarker",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_state",
                    "comment": "State flags. Default state for primitive type is\n  triangles. See: `BGFX_STATE_DEFAULT`.\n  - `BGFX_STATE_DEPTH_TEST_*` - Depth test function.\n  - `BGFX_STATE_BLEND_*` - See remark 1 about BGFX_STATE_BLEND_FUNC.\n  - `BGFX_STATE_BLEND_EQUATION_*` - See remark 2.\n  - `BGFX_STATE_CULL_*` - Backface culling mode.\n  - `BGFX_STATE_WRITE_*` - Enable R, G, B, A or Z write.\n  - `BGFX_STATE_MSAA` - Enable hardware multisample antialiasing.\n  - `BGFX_STATE_PT_[TRISTRIP/LINES/POINTS]` - Primitive type.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_rgba",
                    "comment": "Sets blend factor used by `BGFX_STATE_BLEND_FACTOR` and\n  `BGFX_STATE_BLEND_INV_FACTOR` blend modes.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_state",
            "comment": "Set render states for draw primitive.\n@remarks\n  1. To set up more complex states use:\n     `BGFX_STATE_ALPHA_REF(_ref)`,\n     `BGFX_STATE_POINT_SIZE(_size)`,\n     `BGFX_STATE_BLEND_FUNC(_src, _dst)`,\n     `BGFX_STATE_BLEND_FUNC_SEPARATE(_srcRGB, _dstRGB, _srcA, _dstA)`,\n     `BGFX_STATE_BLEND_EQUATION(_equation)`,\n     `BGFX_STATE_BLEND_EQUATION_SEPARATE(_equationRGB, _equationA)`\n  2. `BGFX_STATE_BLEND_EQUATION_ADD` is set when no other blend\n     equation is specified.",
            "name": "encoderSetState",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Occlusion query handle.",
                    "data_type": "OcclusionQueryHandle"
                },
                {
                    "cname": "_visible",
                    "comment": "Render if occlusion query is visible.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_encoder_set_condition",
            "comment": "Set condition for rendering.",
            "name": "encoderSetCondition",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_fstencil",
                    "comment": "Front stencil state.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_bstencil",
                    "comment": "Back stencil state. If back is set to `BGFX_STENCIL_NONE`\n_fstencil is applied to both front and back facing primitives.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_stencil",
            "comment": "Set stencil test state.",
            "name": "encoderSetStencil",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of view scissor region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of view scissor region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_set_scissor",
            "comment": "Set scissor for draw primitive.\n@remark\n  To scissor for all primitives in view see `bgfx::setViewScissor`.",
            "name": "encoderSetScissor",
            "return_type": "uint16_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_cache",
                    "comment": "Index in scissor cache.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_set_scissor_cached",
            "comment": "Set scissor from cache for draw primitive.\n@remark\n  To scissor for all primitives in view see `bgfx::setViewScissor`.",
            "name": "encoderSetScissorCached",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_mtx",
                    "comment": "Pointer to first matrix in array.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices in array.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_set_transform",
            "comment": "Set model matrix for draw primitive. If it is not called,\nthe model will be rendered with an identity model matrix.",
            "name": "encoderSetTransform",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_cache",
                    "comment": "Index in matrix cache.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices from cache.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_set_transform_cached",
            "comment": " Set model matrix from matrix cache for draw primitive.",
            "name": "encoderSetTransformCached",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_transform",
                    "comment": "Pointer to `Transform` structure.",
                    "data_type": "Transform*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_alloc_transform",
            "comment": "Reserve matrices in internal matrix cache.\n@attention Pointer returned can be modified until `bgfx::frame` is called.",
            "name": "encoderAllocTransform",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Uniform.",
                    "data_type": "UniformHandle"
                },
                {
                    "cname": "_value",
                    "comment": "Pointer to uniform data.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of elements. Passing `UINT16_MAX` will\nuse the _num passed on uniform creation.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_set_uniform",
            "comment": "Set shader uniform parameter for draw primitive.",
            "name": "encoderSetUniform",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Index buffer.",
                    "data_type": "IndexBufferHandle"
                }
            ],
            "cname": "bgfx_encoder_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Index buffer.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer.",
                    "data_type": "DynamicIndexBufferHandle"
                }
            ],
            "cname": "bgfx_encoder_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer.",
                    "data_type": "DynamicIndexBufferHandle"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_dynamic_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_tib",
                    "comment": "Transient index buffer.",
                    "data_type": "const TransientIndexBuffer*"
                }
            ],
            "cname": "bgfx_encoder_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_tib",
                    "comment": "Transient index buffer.",
                    "data_type": "const TransientIndexBuffer*"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_transient_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "encoderSetTransientIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_buffer_with_layout",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_dynamic_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_encoder_set_dynamic_vertex_buffer_with_layout",
            "name": "encoderSetDynamicVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_transient_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetTransientVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_encoder_set_transient_vertex_buffer_with_layout",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "encoderSetTransientVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_vertex_count",
            "comment": "Set number of vertices for auto generated vertices use in conjunction\nwith gl_VertexID.\n@attention Availability depends on: `BGFX_CAPS_VERTEX_ID`.",
            "name": "encoderSetVertexCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_idb",
                    "comment": "Transient instance data buffer.",
                    "data_type": "const InstanceDataBuffer*"
                }
            ],
            "cname": "bgfx_encoder_set_instance_data_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "encoderSetInstanceDataBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_idb",
                    "comment": "Transient instance data buffer.",
                    "data_type": "const InstanceDataBuffer*"
                },
                {
                    "cname": "_start",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_instance_data_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "encoderSetInstanceDataBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_instance_data_from_vertex_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "encoderSetInstanceDataFromVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "encoderSetInstanceDataFromDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_numInstances",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_instance_count",
            "comment": "Set number of instances for auto generated instances use in conjunction\nwith gl_InstanceID.\n@attention Availability depends on: `BGFX_CAPS_VERTEX_ID`.",
            "name": "encoderSetInstanceCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Texture unit.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_sampler",
                    "comment": "Program sampler.",
                    "data_type": "UniformHandle"
                },
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture sampling mode. Default value UINT32_MAX uses\n  texture sampling settings from the texture.\n  - `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n    mode.\n  - `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n    sampling.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_encoder_set_texture",
            "comment": "Set texture stage for draw primitive.",
            "name": "encoderSetTexture",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                }
            ],
            "cname": "bgfx_encoder_touch",
            "comment": "Submit an empty primitive for rendering. Uniforms and draw state\nwill be applied but no geometry will be submitted. Useful in cases\nwhen no other draw/compute primitive is submitted to view, but it's\ndesired to execute clear view.\n@remark\n  These empty draw calls will sort before ordinary draw calls.",
            "name": "encoderTouch",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_submit",
            "comment": "Submit primitive for rendering.",
            "name": "encoderSubmit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_occlusionQuery",
                    "comment": "Occlusion query.",
                    "data_type": "OcclusionQueryHandle"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_submit_occlusion_query",
            "comment": "Submit primitive with occlusion query for rendering.",
            "name": "encoderSubmitOcclusionQuery",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of draws.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_submit_indirect",
            "comment": "Submit primitive for rendering with index and instance data info from\nindirect buffer.\n@attention Availability depends on: `BGFX_CAPS_DRAW_INDIRECT`.",
            "name": "encoderSubmitIndirect",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numHandle",
                    "comment": "Buffer for number of draws. Must be\n  created with `BGFX_BUFFER_INDEX32` and `BGFX_BUFFER_DRAW_INDIRECT`.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_numIndex",
                    "comment": "Element in number buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numMax",
                    "comment": "Max number of draws.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_submit_indirect_count",
            "comment": "Submit primitive for rendering with index and instance data info and\ndraw count from indirect buffers.\n@attention Availability depends on: `BGFX_CAPS_DRAW_INDIRECT_COUNT`.",
            "name": "encoderSubmitIndirectCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Index buffer handle.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_compute_index_buffer",
            "comment": "Set compute index buffer.",
            "name": "encoderSetComputeIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer handle.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_compute_vertex_buffer",
            "comment": "Set compute vertex buffer.",
            "name": "encoderSetComputeVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer handle.",
                    "data_type": "DynamicIndexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_compute_dynamic_index_buffer",
            "comment": "Set compute dynamic index buffer.",
            "name": "encoderSetComputeDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer handle.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_compute_dynamic_vertex_buffer",
            "comment": "Set compute dynamic vertex buffer.",
            "name": "encoderSetComputeDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Indirect buffer handle.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_compute_indirect_buffer",
            "comment": "Set compute indirect buffer.",
            "name": "encoderSetComputeIndirectBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_access",
                    "comment": "Image access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                }
            ],
            "cname": "bgfx_encoder_set_image",
            "comment": "Set compute image from texture.",
            "name": "encoderSetImage",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Compute program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_numX",
                    "comment": "Number of groups X.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numY",
                    "comment": "Number of groups Y.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numZ",
                    "comment": "Number of groups Z.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_dispatch",
            "comment": "Dispatch compute.",
            "name": "encoderDispatch",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Compute program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of dispatches.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_dispatch_indirect",
            "comment": "Dispatch compute indirect.",
            "name": "encoderDispatchIndirect",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_encoder_discard",
            "comment": "Discard previously set state for draw or compute call.",
            "name": "encoderDiscard",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_dstX",
                    "comment": "Destination texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstY",
                    "comment": "Destination texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_src",
                    "comment": "Source texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_srcX",
                    "comment": "Source texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcY",
                    "comment": "Source texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_blit",
            "comment": "Blit 2D texture region between two 2D textures.\n@attention Destination texture must be created with `BGFX_TEXTURE_BLIT_DST` flag.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_BLIT`.",
            "name": "encoderBlit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_this",
                    "data_type": "Encoder*"
                },
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_dstMip",
                    "comment": "Destination texture mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_dstX",
                    "comment": "Destination texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstY",
                    "comment": "Destination texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstZ",
                    "comment": "If texture is 2D this argument should be 0. If destination texture is cube\nthis argument represents destination texture cube face. For 3D texture this argument\nrepresents destination texture Z position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_src",
                    "comment": "Source texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_srcMip",
                    "comment": "Source texture mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_srcX",
                    "comment": "Source texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcY",
                    "comment": "Source texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcZ",
                    "comment": "If texture is 2D this argument should be 0. If source texture is cube\nthis argument represents source texture cube face. For 3D texture this argument\nrepresents source texture Z position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "If texture is 3D this argument represents depth of region, otherwise it's\nunused.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_encoder_blit",
            "comment": "Blit 2D texture region between two 2D textures.\n@attention Destination texture must be created with `BGFX_TEXTURE_BLIT_DST` flag.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_BLIT`.",
            "name": "encoderBlit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Frame buffer handle. If handle is `BGFX_INVALID_HANDLE` request will be\nmade for main window back buffer.",
                    "data_type": "FrameBufferHandle"
                },
                {
                    "cname": "_filePath",
                    "comment": "Will be passed to `bgfx::CallbackI::screenShot` callback.",
                    "data_type": "const char*"
                }
            ],
            "cname": "bgfx_request_screen_shot",
            "comment": "Request screen shot of window back buffer.\n@remarks\n  `bgfx::CallbackI::screenShot` must be implemented.\n@attention Frame buffer handle must be created with OS' target native window handle.",
            "name": "requestScreenShot",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_msecs",
                    "comment": "Timeout in milliseconds.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_render_frame",
            "comment": "Render frame.\n@attention `bgfx::renderFrame` is blocking call. It waits for\n  `bgfx::frame` to be called from API thread to process frame.\n  If timeout value is passed call will timeout and return even\n  if `bgfx::frame` is not called.\n@warning This call should be only used on platforms that don't\n  allow creating separate rendering thread. If it is called before\n  to bgfx::init, render thread won't be created by bgfx::init call.",
            "name": "renderFrame",
            "return_type": "RenderFrame::Enum"
        },
        {
            "arguments":
            [
                {
                    "cname": "_data",
                    "comment": "Platform data.",
                    "data_type": "const PlatformData *"
                }
            ],
            "cname": "bgfx_set_platform_data",
            "comment": "Set platform data.\n@warning Must be called before `bgfx::init`.",
            "name": "setPlatformData",
            "return_type": "void"
        },
        {
            "arguments":
            [],
            "cname": "bgfx_get_internal_data",
            "comment": "Get internal data for interop.\n@attention It's expected you understand some bgfx internals before you\n  use this call.\n@warning Must be called only on render thread.",
            "name": "getInternalData",
            "return_type": "const InternalData*"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_ptr",
                    "comment": "Native API pointer to texture.",
                    "data_type": "uintptr_t"
                }
            ],
            "cname": "bgfx_override_internal_texture_ptr",
            "comment": "Override internal texture with externally created texture. Previously\ncreated internal texture will released.\n@attention It's expected you understand some bgfx internals before you\n  use this call.\n@warning Must be called only on render thread.",
            "name": "overrideInternalTexturePtr",
            "return_type": "uintptr_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_width",
                    "comment": "Width.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_numMips",
                    "comment": "Number of mip-maps.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture creation (see `BGFX_TEXTURE_*`.), and sampler (see `BGFX_SAMPLER_*`)\nflags. Default texture sampling mode is linear, and wrap mode is repeat.\n- `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n  mode.\n- `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n  sampling.",
                    "data_type": "uint64_t"
                }
            ],
            "cname": "bgfx_override_internal_texture",
            "comment": "Override internal texture by creating new texture. Previously created\ninternal texture will released.\n@attention It's expected you understand some bgfx internals before you\n  use this call.\n@returns Native API pointer to texture. If result is 0, texture is not created yet from the\n  main thread.\n@warning Must be called only on render thread.",
            "name": "overrideInternalTexture",
            "return_type": "uintptr_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_name",
                    "comment": "Marker name.",
                    "data_type": "const char*"
                },
                {
                    "cname": "_len",
                    "comment": "Marker name length (if length is INT32_MAX, it's expected\nthat _name is zero terminated string.",
                    "data_type": "int32_t"
                }
            ],
            "cname": "bgfx_set_marker",
            "comment": "Sets a debug marker. This allows you to group graphics calls together for easy browsing in\ngraphics debugging tools.",
            "name": "setMarker",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_state",
                    "comment": "State flags. Default state for primitive type is\n  triangles. See: `BGFX_STATE_DEFAULT`.\n  - `BGFX_STATE_DEPTH_TEST_*` - Depth test function.\n  - `BGFX_STATE_BLEND_*` - See remark 1 about BGFX_STATE_BLEND_FUNC.\n  - `BGFX_STATE_BLEND_EQUATION_*` - See remark 2.\n  - `BGFX_STATE_CULL_*` - Backface culling mode.\n  - `BGFX_STATE_WRITE_*` - Enable R, G, B, A or Z write.\n  - `BGFX_STATE_MSAA` - Enable hardware multisample antialiasing.\n  - `BGFX_STATE_PT_[TRISTRIP/LINES/POINTS]` - Primitive type.",
                    "data_type": "uint64_t"
                },
                {
                    "cname": "_rgba",
                    "comment": "Sets blend factor used by `BGFX_STATE_BLEND_FACTOR` and\n  `BGFX_STATE_BLEND_INV_FACTOR` blend modes.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_state",
            "comment": "Set render states for draw primitive.\n@remarks\n  1. To set up more complex states use:\n     `BGFX_STATE_ALPHA_REF(_ref)`,\n     `BGFX_STATE_POINT_SIZE(_size)`,\n     `BGFX_STATE_BLEND_FUNC(_src, _dst)`,\n     `BGFX_STATE_BLEND_FUNC_SEPARATE(_srcRGB, _dstRGB, _srcA, _dstA)`,\n     `BGFX_STATE_BLEND_EQUATION(_equation)`,\n     `BGFX_STATE_BLEND_EQUATION_SEPARATE(_equationRGB, _equationA)`\n  2. `BGFX_STATE_BLEND_EQUATION_ADD` is set when no other blend\n     equation is specified.",
            "name": "setState",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Occlusion query handle.",
                    "data_type": "OcclusionQueryHandle"
                },
                {
                    "cname": "_visible",
                    "comment": "Render if occlusion query is visible.",
                    "data_type": "bool"
                }
            ],
            "cname": "bgfx_set_condition",
            "comment": "Set condition for rendering.",
            "name": "setCondition",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_fstencil",
                    "comment": "Front stencil state.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_bstencil",
                    "comment": "Back stencil state. If back is set to `BGFX_STENCIL_NONE`\n_fstencil is applied to both front and back facing primitives.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_stencil",
            "comment": "Set stencil test state.",
            "name": "setStencil",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_x",
                    "comment": "Position x from the left corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_y",
                    "comment": "Position y from the top corner of the window.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of view scissor region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of view scissor region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_scissor",
            "comment": "Set scissor for draw primitive.\n@remark\n  To scissor for all primitives in view see `bgfx::setViewScissor`.",
            "name": "setScissor",
            "return_type": "uint16_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_cache",
                    "comment": "Index in scissor cache.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_scissor_cached",
            "comment": "Set scissor from cache for draw primitive.\n@remark\n  To scissor for all primitives in view see `bgfx::setViewScissor`.",
            "name": "setScissorCached",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_mtx",
                    "comment": "Pointer to first matrix in array.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices in array.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_transform",
            "comment": "Set model matrix for draw primitive. If it is not called,\nthe model will be rendered with an identity model matrix.",
            "name": "setTransform",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_cache",
                    "comment": "Index in matrix cache.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices from cache.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_transform_cached",
            "comment": " Set model matrix from matrix cache for draw primitive.",
            "name": "setTransformCached",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_transform",
                    "comment": "Pointer to `Transform` structure.",
                    "data_type": "Transform*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of matrices.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_alloc_transform",
            "comment": "Reserve matrices in internal matrix cache.\n@attention Pointer returned can be modified until `bgfx::frame` is called.",
            "name": "allocTransform",
            "return_type": "uint32_t"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Uniform.",
                    "data_type": "UniformHandle"
                },
                {
                    "cname": "_value",
                    "comment": "Pointer to uniform data.",
                    "data_type": "const void*"
                },
                {
                    "cname": "_num",
                    "comment": "Number of elements. Passing `UINT16_MAX` will\nuse the _num passed on uniform creation.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_set_uniform",
            "comment": "Set shader uniform parameter for draw primitive.",
            "name": "setUniform",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Index buffer.",
                    "data_type": "IndexBufferHandle"
                }
            ],
            "cname": "bgfx_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Index buffer.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer.",
                    "data_type": "DynamicIndexBufferHandle"
                }
            ],
            "cname": "bgfx_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer.",
                    "data_type": "DynamicIndexBufferHandle"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_dynamic_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_tib",
                    "comment": "Transient index buffer.",
                    "data_type": "const TransientIndexBuffer*"
                }
            ],
            "cname": "bgfx_set_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_tib",
                    "comment": "Transient index buffer.",
                    "data_type": "const TransientIndexBuffer*"
                },
                {
                    "cname": "_firstIndex",
                    "comment": "First index to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numIndices",
                    "comment": "Number of indices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_transient_index_buffer",
            "comment": "Set index buffer for draw primitive.",
            "name": "setTransientIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                }
            ],
            "cname": "bgfx_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_set_vertex_buffer_with_layout",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                }
            ],
            "cname": "bgfx_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_dynamic_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_set_dynamic_vertex_buffer_with_layout",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setDynamicVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                }
            ],
            "cname": "bgfx_set_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_transient_vertex_buffer",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setTransientVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stream",
                    "comment": "Vertex stream.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_tvb",
                    "comment": "Transient vertex buffer.",
                    "data_type": "const TransientVertexBuffer*"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First vertex to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices to render.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_layoutHandle",
                    "comment": "Vertex layout for aliasing vertex buffer. If invalid\nhandle is used, vertex layout used for creation\nof vertex buffer will be used.",
                    "data_type": "VertexLayoutHandle"
                }
            ],
            "cname": "bgfx_set_transient_vertex_buffer_with_layout",
            "comment": "Set vertex buffer for draw primitive.",
            "name": "setTransientVertexBufferWithLayout",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_numVertices",
                    "comment": "Number of vertices.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_vertex_count",
            "comment": "Set number of vertices for auto generated vertices use in conjunction\nwith gl_VertexID.\n@attention Availability depends on: `BGFX_CAPS_VERTEX_ID`.",
            "name": "setVertexCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_idb",
                    "comment": "Transient instance data buffer.",
                    "data_type": "const InstanceDataBuffer*"
                }
            ],
            "cname": "bgfx_set_instance_data_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "setInstanceDataBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_idb",
                    "comment": "Transient instance data buffer.",
                    "data_type": "const InstanceDataBuffer*"
                },
                {
                    "cname": "_start",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_instance_data_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "setInstanceDataBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_instance_data_from_vertex_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "setInstanceDataFromVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_startVertex",
                    "comment": "First instance data.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of data instances.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_instance_data_from_dynamic_vertex_buffer",
            "comment": "Set instance data buffer for draw primitive.",
            "name": "setInstanceDataFromDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_numInstances",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_instance_count",
            "comment": "Set number of instances for auto generated instances use in conjunction\nwith gl_InstanceID.\n@attention Availability depends on: `BGFX_CAPS_VERTEX_ID`.",
            "name": "setInstanceCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Texture unit.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_sampler",
                    "comment": "Program sampler.",
                    "data_type": "UniformHandle"
                },
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_flags",
                    "comment": "Texture sampling mode. Default value UINT32_MAX uses\n  texture sampling settings from the texture.\n  - `BGFX_SAMPLER_[U/V/W]_[MIRROR/CLAMP]` - Mirror or clamp to edge wrap\n    mode.\n  - `BGFX_SAMPLER_[MIN/MAG/MIP]_[POINT/ANISOTROPIC]` - Point or anisotropic\n    sampling.",
                    "data_type": "uint32_t"
                }
            ],
            "cname": "bgfx_set_texture",
            "comment": "Set texture stage for draw primitive.",
            "name": "setTexture",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                }
            ],
            "cname": "bgfx_touch",
            "comment": "Submit an empty primitive for rendering. Uniforms and draw state\nwill be applied but no geometry will be submitted.\n@remark\n  These empty draw calls will sort before ordinary draw calls.",
            "name": "touch",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Which states to discard for next draw. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_submit",
            "comment": "Submit primitive for rendering.",
            "name": "submit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_occlusionQuery",
                    "comment": "Occlusion query.",
                    "data_type": "OcclusionQueryHandle"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Which states to discard for next draw. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_submit_occlusion_query",
            "comment": "Submit primitive with occlusion query for rendering.",
            "name": "submitOcclusionQuery",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of draws.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Which states to discard for next draw. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_submit_indirect",
            "comment": "Submit primitive for rendering with index and instance data info from\nindirect buffer.\n@attention Availability depends on: `BGFX_CAPS_DRAW_INDIRECT`.",
            "name": "submitIndirect",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numHandle",
                    "comment": "Buffer for number of draws. Must be\n  created with `BGFX_BUFFER_INDEX32` and `BGFX_BUFFER_DRAW_INDIRECT`.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_numIndex",
                    "comment": "Element in number buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numMax",
                    "comment": "Max number of draws.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_depth",
                    "comment": "Depth for sorting.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Which states to discard for next draw. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_submit_indirect_count",
            "comment": "Submit primitive for rendering with index and instance data info and\ndraw count from indirect buffers.\n@attention Availability depends on: `BGFX_CAPS_DRAW_INDIRECT_COUNT`.",
            "name": "submitIndirectCount",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Index buffer handle.",
                    "data_type": "IndexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_set_compute_index_buffer",
            "comment": "Set compute index buffer.",
            "name": "setComputeIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Vertex buffer handle.",
                    "data_type": "VertexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_set_compute_vertex_buffer",
            "comment": "Set compute vertex buffer.",
            "name": "setComputeVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic index buffer handle.",
                    "data_type": "DynamicIndexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_set_compute_dynamic_index_buffer",
            "comment": "Set compute dynamic index buffer.",
            "name": "setComputeDynamicIndexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Dynamic vertex buffer handle.",
                    "data_type": "DynamicVertexBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_set_compute_dynamic_vertex_buffer",
            "comment": "Set compute dynamic vertex buffer.",
            "name": "setComputeDynamicVertexBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Indirect buffer handle.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_access",
                    "comment": "Buffer access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                }
            ],
            "cname": "bgfx_set_compute_indirect_buffer",
            "comment": "Set compute indirect buffer.",
            "name": "setComputeIndirectBuffer",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_stage",
                    "comment": "Compute stage.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_handle",
                    "comment": "Texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_mip",
                    "comment": "Mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_access",
                    "comment": "Image access. See `Access::Enum`.",
                    "data_type": "Access::Enum"
                },
                {
                    "cname": "_format",
                    "comment": "Texture format. See: `TextureFormat::Enum`.",
                    "data_type": "TextureFormat::Enum"
                }
            ],
            "cname": "bgfx_set_image",
            "comment": "Set compute image from texture.",
            "name": "setImage",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Compute program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_numX",
                    "comment": "Number of groups X.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numY",
                    "comment": "Number of groups Y.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_numZ",
                    "comment": "Number of groups Z.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_dispatch",
            "comment": "Dispatch compute.",
            "name": "dispatch",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_program",
                    "comment": "Compute program.",
                    "data_type": "ProgramHandle"
                },
                {
                    "cname": "_indirectHandle",
                    "comment": "Indirect buffer.",
                    "data_type": "IndirectBufferHandle"
                },
                {
                    "cname": "_start",
                    "comment": "First element in indirect buffer.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_num",
                    "comment": "Number of dispatches.",
                    "data_type": "uint32_t"
                },
                {
                    "cname": "_flags",
                    "comment": "Discard or preserve states. See `BGFX_DISCARD_*`.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_dispatch_indirect",
            "comment": "Dispatch compute indirect.",
            "name": "dispatchIndirect",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_flags",
                    "comment": "Draw/compute states to discard.",
                    "data_type": "uint8_t"
                }
            ],
            "cname": "bgfx_discard",
            "comment": "Discard previously set state for draw or compute call.",
            "name": "discard",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_dstX",
                    "comment": "Destination texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstY",
                    "comment": "Destination texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_src",
                    "comment": "Source texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_srcX",
                    "comment": "Source texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcY",
                    "comment": "Source texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of region.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_blit",
            "comment": "Blit 2D texture region between two 2D textures.\n@attention Destination texture must be created with `BGFX_TEXTURE_BLIT_DST` flag.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_BLIT`.",
            "name": "blit",
            "return_type": "void"
        },
        {
            "arguments":
            [
                {
                    "cname": "_id",
                    "comment": "View id.",
                    "data_type": "ViewId"
                },
                {
                    "cname": "_dst",
                    "comment": "Destination texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_dstMip",
                    "comment": "Destination texture mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_dstX",
                    "comment": "Destination texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstY",
                    "comment": "Destination texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_dstZ",
                    "comment": "If texture is 2D this argument should be 0. If destination texture is cube\nthis argument represents destination texture cube face. For 3D texture this argument\nrepresents destination texture Z position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_src",
                    "comment": "Source texture handle.",
                    "data_type": "TextureHandle"
                },
                {
                    "cname": "_srcMip",
                    "comment": "Source texture mip level.",
                    "data_type": "uint8_t"
                },
                {
                    "cname": "_srcX",
                    "comment": "Source texture X position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcY",
                    "comment": "Source texture Y position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_srcZ",
                    "comment": "If texture is 2D this argument should be 0. If source texture is cube\nthis argument represents source texture cube face. For 3D texture this argument\nrepresents source texture Z position.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_width",
                    "comment": "Width of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_height",
                    "comment": "Height of region.",
                    "data_type": "uint16_t"
                },
                {
                    "cname": "_depth",
                    "comment": "If texture is 3D this argument represents depth of region, otherwise it's\nunused.",
                    "data_type": "uint16_t"
                }
            ],
            "cname": "bgfx_blit",
            "comment": "Blit 2D texture region between two 2D textures.\n@attention Destination texture must be created with `BGFX_TEXTURE_BLIT_DST` flag.\n@attention Availability depends on: `BGFX_CAPS_TEXTURE_BLIT`.",
            "name": "blit",
            "return_type": "void"
        }
    ],
    "typedefs":
    {
        "ViewId": "uint16"
    },
    "types":
    [
        {
            "data_type": "uint64",
            "name": "StateFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Enable R write.",
                    "name": "WriteR",
                    "value": "0x0000000000000001"
                },
                {
                    "comment": "Enable G write.",
                    "name": "WriteG",
                    "value": "0x0000000000000002"
                },
                {
                    "comment": "Enable B write.",
                    "name": "WriteB",
                    "value": "0x0000000000000004"
                },
                {
                    "comment": "Enable alpha write.",
                    "name": "WriteA",
                    "value": "0x0000000000000008"
                },
                {
                    "comment": "Enable depth write.",
                    "name": "WriteZ",
                    "value": "0x0000004000000000"
                },
                {
                    "comment": "Enable RGB write.",
                    "name": "WriteRgb",
                    "value": "0x0000000000000007"
                },
                {
                    "comment": "Write all channels mask.",
                    "name": "WriteMask",
                    "value": "0x000000400000000f"
                },
                {
                    "comment": "Enable depth test, less.",
                    "name": "DepthTestLess",
                    "value": "0x0000000000000010"
                },
                {
                    "comment": "Enable depth test, less or equal.",
                    "name": "DepthTestLequal",
                    "value": "0x0000000000000020"
                },
                {
                    "comment": "Enable depth test, equal.",
                    "name": "DepthTestEqual",
                    "value": "0x0000000000000030"
                },
                {
                    "comment": "Enable depth test, greater or equal.",
                    "name": "DepthTestGequal",
                    "value": "0x0000000000000040"
                },
                {
                    "comment": "Enable depth test, greater.",
                    "name": "DepthTestGreater",
                    "value": "0x0000000000000050"
                },
                {
                    "comment": "Enable depth test, not equal.",
                    "name": "DepthTestNotequal",
                    "value": "0x0000000000000060"
                },
                {
                    "comment": "Enable depth test, never.",
                    "name": "DepthTestNever",
                    "value": "0x0000000000000070"
                },
                {
                    "comment": "Enable depth test, always.",
                    "name": "DepthTestAlways",
                    "value": "0x0000000000000080"
                },
                {
                    "name": "DepthTestShift",
                    "value": "4"
                },
                {
                    "name": "DepthTestMask",
                    "value": "0x00000000000000f0"
                },
                {
                    "comment": "0, 0, 0, 0",
                    "name": "BlendZero",
                    "value": "0x0000000000001000"
                },
                {
                    "comment": "1, 1, 1, 1",
                    "name": "BlendOne",
                    "value": "0x0000000000002000"
                },
                {
                    "comment": "Rs, Gs, Bs, As",
                    "name": "BlendSrcColor",
                    "value": "0x0000000000003000"
                },
                {
                    "comment": "1-Rs, 1-Gs, 1-Bs, 1-As",
                    "name": "BlendInvSrcColor",
                    "value": "0x0000000000004000"
                },
                {
                    "comment": "As, As, As, As",
                    "name": "BlendSrcAlpha",
                    "value": "0x0000000000005000"
                },
                {
                    "comment": "1-As, 1-As, 1-As, 1-As",
                    "name": "BlendInvSrcAlpha",
                    "value": "0x0000000000006000"
                },
                {
                    "comment": "Ad, Ad, Ad, Ad",
                    "name": "BlendDstAlpha",
                    "value": "0x0000000000007000"
                },
                {
                    "comment": "1-Ad, 1-Ad, 1-Ad ,1-Ad",
                    "name": "BlendInvDstAlpha",
                    "value": "0x0000000000008000"
                },
                {
                    "comment": "Rd, Gd, Bd, Ad",
                    "name": "BlendDstColor",
                    "value": "0x0000000000009000"
                },
                {
                    "comment": "1-Rd, 1-Gd, 1-Bd, 1-Ad",
                    "name": "BlendInvDstColor",
                    "value": "0x000000000000a000"
                },
                {
                    "comment": "f, f, f, 1; f = min(As, 1-Ad)",
                    "name": "BlendSrcAlphaSat",
                    "value": "0x000000000000b000"
                },
                {
                    "comment": "Blend factor",
                    "name": "BlendFactor",
                    "value": "0x000000000000c000"
                },
                {
                    "comment": "1-Blend factor",
                    "name": "BlendInvFactor",
                    "value": "0x000000000000d000"
                },
                {
                    "name": "BlendShift",
                    "value": "12"
                },
                {
                    "name": "BlendMask",
                    "value": "0x000000000ffff000"
                },
                {
                    "comment": "Blend add: src + dst.",
                    "name": "BlendEquationAdd",
                    "value": "0x0000000000000000"
                },
                {
                    "comment": "Blend subtract: src - dst.",
                    "name": "BlendEquationSub",
                    "value": "0x0000000010000000"
                },
                {
                    "comment": "Blend reverse subtract: dst - src.",
                    "name": "BlendEquationRevsub",
                    "value": "0x0000000020000000"
                },
                {
                    "comment": "Blend min: min(src, dst).",
                    "name": "BlendEquationMin",
                    "value": "0x0000000030000000"
                },
                {
                    "comment": "Blend max: max(src, dst).",
                    "name": "BlendEquationMax",
                    "value": "0x0000000040000000"
                },
                {
                    "name": "BlendEquationShift",
                    "value": "28"
                },
                {
                    "name": "BlendEquationMask",
                    "value": "0x00000003f0000000"
                },
                {
                    "comment": "Cull clockwise triangles.",
                    "name": "CullCw",
                    "value": "0x0000001000000000"
                },
                {
                    "comment": "Cull counter-clockwise triangles.",
                    "name": "CullCcw",
                    "value": "0x0000002000000000"
                },
                {
                    "name": "CullShift",
                    "value": "36"
                },
                {
                    "name": "CullMask",
                    "value": "0x0000003000000000"
                },
                {
                    "name": "AlphaRefShift",
                    "value": "40"
                },
                {
                    "name": "AlphaRefMask",
                    "value": "0x0000ff0000000000"
                },
                {
                    "comment": "Tristrip.",
                    "name": "PtTristrip",
                    "value": "0x0001000000000000"
                },
                {
                    "comment": "Lines.",
                    "name": "PtLines",
                    "value": "0x0002000000000000"
                },
                {
                    "comment": "Line strip.",
                    "name": "PtLinestrip",
                    "value": "0x0003000000000000"
                },
                {
                    "comment": "Points.",
                    "name": "PtPoints",
                    "value": "0x0004000000000000"
                },
                {
                    "name": "PtShift",
                    "value": "48"
                },
                {
                    "name": "PtMask",
                    "value": "0x0007000000000000"
                },
                {
                    "name": "PointSizeShift",
                    "value": "52"
                },
                {
                    "name": "PointSizeMask",
                    "value": "0x00f0000000000000"
                },
                {
                    "comment": "Enable MSAA rasterization.",
                    "name": "Msaa",
                    "value": "0x0100000000000000"
                },
                {
                    "comment": "Enable line AA rasterization.",
                    "name": "Lineaa",
                    "value": "0x0200000000000000"
                },
                {
                    "comment": "Enable conservative rasterization.",
                    "name": "ConservativeRaster",
                    "value": "0x0400000000000000"
                },
                {
                    "comment": "No state.",
                    "name": "None",
                    "value": "0x0000000000000000"
                },
                {
                    "comment": "Front counter-clockwise (default is clockwise).",
                    "name": "FrontCcw",
                    "value": "0x0000008000000000"
                },
                {
                    "comment": "Enable blend independent.",
                    "name": "BlendIndependent",
                    "value": "0x0000000400000000"
                },
                {
                    "comment": "Enable alpha to coverage.",
                    "name": "BlendAlphaToCoverage",
                    "value": "0x0000000800000000"
                },
                {
                    "comment": "Default state is write to RGB, alpha, and depth with depth test less enabled, with clockwise\nculling and MSAA (when writing into MSAA frame buffer, otherwise this flag is ignored).",
                    "name": "Default",
                    "value": "0x010000500000001f"
                },
                {
                    "name": "Mask",
                    "value": "0xffffffffffffffff"
                },
                {
                    "name": "ReservedShift",
                    "value": "61"
                },
                {
                    "name": "ReservedMask",
                    "value": "0xe000000000000000"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "StencilFlags",
            "type": "bits",
            "values":
            [
                {
                    "name": "FuncRefShift",
                    "value": "0"
                },
                {
                    "name": "FuncRefMask",
                    "value": "0x000000ff"
                },
                {
                    "name": "FuncRmaskShift",
                    "value": "8"
                },
                {
                    "name": "FuncRmaskMask",
                    "value": "0x0000ff00"
                },
                {
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "name": "Mask",
                    "value": "0xffffffff"
                },
                {
                    "name": "Default",
                    "value": "0x00000000"
                },
                {
                    "comment": "Enable stencil test, less.",
                    "name": "TestLess",
                    "value": "0x00010000"
                },
                {
                    "comment": "Enable stencil test, less or equal.",
                    "name": "TestLequal",
                    "value": "0x00020000"
                },
                {
                    "comment": "Enable stencil test, equal.",
                    "name": "TestEqual",
                    "value": "0x00030000"
                },
                {
                    "comment": "Enable stencil test, greater or equal.",
                    "name": "TestGequal",
                    "value": "0x00040000"
                },
                {
                    "comment": "Enable stencil test, greater.",
                    "name": "TestGreater",
                    "value": "0x00050000"
                },
                {
                    "comment": "Enable stencil test, not equal.",
                    "name": "TestNotequal",
                    "value": "0x00060000"
                },
                {
                    "comment": "Enable stencil test, never.",
                    "name": "TestNever",
                    "value": "0x00070000"
                },
                {
                    "comment": "Enable stencil test, always.",
                    "name": "TestAlways",
                    "value": "0x00080000"
                },
                {
                    "name": "TestShift",
                    "value": "16"
                },
                {
                    "name": "TestMask",
                    "value": "0x000f0000"
                },
                {
                    "comment": "Zero.",
                    "name": "OpFailSZero",
                    "value": "0x00000000"
                },
                {
                    "comment": "Keep.",
                    "name": "OpFailSKeep",
                    "value": "0x00100000"
                },
                {
                    "comment": "Replace.",
                    "name": "OpFailSReplace",
                    "value": "0x00200000"
                },
                {
                    "comment": "Increment and wrap.",
                    "name": "OpFailSIncr",
                    "value": "0x00300000"
                },
                {
                    "comment": "Increment and clamp.",
                    "name": "OpFailSIncrsat",
                    "value": "0x00400000"
                },
                {
                    "comment": "Decrement and wrap.",
                    "name": "OpFailSDecr",
                    "value": "0x00500000"
                },
                {
                    "comment": "Decrement and clamp.",
                    "name": "OpFailSDecrsat",
                    "value": "0x00600000"
                },
                {
                    "comment": "Invert.",
                    "name": "OpFailSInvert",
                    "value": "0x00700000"
                },
                {
                    "name": "OpFailSShift",
                    "value": "20"
                },
                {
                    "name": "OpFailSMask",
                    "value": "0x00f00000"
                },
                {
                    "comment": "Zero.",
                    "name": "OpFailZZero",
                    "value": "0x00000000"
                },
                {
                    "comment": "Keep.",
                    "name": "OpFailZKeep",
                    "value": "0x01000000"
                },
                {
                    "comment": "Replace.",
                    "name": "OpFailZReplace",
                    "value": "0x02000000"
                },
                {
                    "comment": "Increment and wrap.",
                    "name": "OpFailZIncr",
                    "value": "0x03000000"
                },
                {
                    "comment": "Increment and clamp.",
                    "name": "OpFailZIncrsat",
                    "value": "0x04000000"
                },
                {
                    "comment": "Decrement and wrap.",
                    "name": "OpFailZDecr",
                    "value": "0x05000000"
                },
                {
                    "comment": "Decrement and clamp.",
                    "name": "OpFailZDecrsat",
                    "value": "0x06000000"
                },
                {
                    "comment": "Invert.",
                    "name": "OpFailZInvert",
                    "value": "0x07000000"
                },
                {
                    "name": "OpFailZShift",
                    "value": "24"
                },
                {
                    "name": "OpFailZMask",
                    "value": "0x0f000000"
                },
                {
                    "comment": "Zero.",
                    "name": "OpPassZZero",
                    "value": "0x00000000"
                },
                {
                    "comment": "Keep.",
                    "name": "OpPassZKeep",
                    "value": "0x10000000"
                },
                {
                    "comment": "Replace.",
                    "name": "OpPassZReplace",
                    "value": "0x20000000"
                },
                {
                    "comment": "Increment and wrap.",
                    "name": "OpPassZIncr",
                    "value": "0x30000000"
                },
                {
                    "comment": "Increment and clamp.",
                    "name": "OpPassZIncrsat",
                    "value": "0x40000000"
                },
                {
                    "comment": "Decrement and wrap.",
                    "name": "OpPassZDecr",
                    "value": "0x50000000"
                },
                {
                    "comment": "Decrement and clamp.",
                    "name": "OpPassZDecrsat",
                    "value": "0x60000000"
                },
                {
                    "comment": "Invert.",
                    "name": "OpPassZInvert",
                    "value": "0x70000000"
                },
                {
                    "name": "OpPassZShift",
                    "value": "28"
                },
                {
                    "name": "OpPassZMask",
                    "value": "0xf0000000"
                }
            ]
        },
        {
            "data_type": "uint16",
            "name": "ClearFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "No clear flags.",
                    "name": "None",
                    "value": "0x0000"
                },
                {
                    "comment": "Clear color.",
                    "name": "Color",
                    "value": "0x0001"
                },
                {
                    "comment": "Clear depth.",
                    "name": "Depth",
                    "value": "0x0002"
                },
                {
                    "comment": "Clear stencil.",
                    "name": "Stencil",
                    "value": "0x0004"
                },
                {
                    "comment": "Discard frame buffer attachment 0.",
                    "name": "DiscardColor0",
                    "value": "0x0008"
                },
                {
                    "comment": "Discard frame buffer attachment 1.",
                    "name": "DiscardColor1",
                    "value": "0x0010"
                },
                {
                    "comment": "Discard frame buffer attachment 2.",
                    "name": "DiscardColor2",
                    "value": "0x0020"
                },
                {
                    "comment": "Discard frame buffer attachment 3.",
                    "name": "DiscardColor3",
                    "value": "0x0040"
                },
                {
                    "comment": "Discard frame buffer attachment 4.",
                    "name": "DiscardColor4",
                    "value": "0x0080"
                },
                {
                    "comment": "Discard frame buffer attachment 5.",
                    "name": "DiscardColor5",
                    "value": "0x0100"
                },
                {
                    "comment": "Discard frame buffer attachment 6.",
                    "name": "DiscardColor6",
                    "value": "0x0200"
                },
                {
                    "comment": "Discard frame buffer attachment 7.",
                    "name": "DiscardColor7",
                    "value": "0x0400"
                },
                {
                    "comment": "Discard frame buffer depth attachment.",
                    "name": "DiscardDepth",
                    "value": "0x0800"
                },
                {
                    "comment": "Discard frame buffer stencil attachment.",
                    "name": "DiscardStencil",
                    "value": "0x1000"
                },
                {
                    "name": "DiscardColorMask",
                    "value": "0x07f8"
                },
                {
                    "name": "DiscardMask",
                    "value": "0x1ff8"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "DiscardFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Preserve everything.",
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "comment": "Discard texture sampler and buffer bindings.",
                    "name": "Bindings",
                    "value": "0x00000001"
                },
                {
                    "comment": "Discard index buffer.",
                    "name": "IndexBuffer",
                    "value": "0x00000002"
                },
                {
                    "comment": "Discard instance data.",
                    "name": "InstanceData",
                    "value": "0x00000004"
                },
                {
                    "comment": "Discard state and uniform bindings.",
                    "name": "State",
                    "value": "0x00000008"
                },
                {
                    "comment": "Discard transform.",
                    "name": "Transform",
                    "value": "0x00000010"
                },
                {
                    "comment": "Discard vertex streams.",
                    "name": "VertexStreams",
                    "value": "0x00000020"
                },
                {
                    "comment": "Discard all states.",
                    "name": "All",
                    "value": "0x000000ff"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "DebugFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "No debug.",
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "comment": "Enable wireframe for all primitives.",
                    "name": "Wireframe",
                    "value": "0x00000001"
                },
                {
                    "comment": "Enable infinitely fast hardware test. No draw calls will be submitted to driver.\nIt's useful when profiling to quickly assess bottleneck between CPU and GPU.",
                    "name": "Ifh",
                    "value": "0x00000002"
                },
                {
                    "comment": "Enable statistics display.",
                    "name": "Stats",
                    "value": "0x00000004"
                },
                {
                    "comment": "Enable debug text display.",
                    "name": "Text",
                    "value": "0x00000008"
                },
                {
                    "comment": "Enable profiler. This causes per-view statistics to be collected, available through `bgfx::Stats::ViewStats`. This is unrelated to the profiler functions in `bgfx::CallbackI`.",
                    "name": "Profiler",
                    "value": "0x00000010"
                }
            ]
        },
        {
            "data_type": "uint16",
            "name": "BufferFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "1 8-bit value",
                    "name": "ComputeFormat8x1",
                    "value": "0x0001"
                },
                {
                    "comment": "2 8-bit values",
                    "name": "ComputeFormat8x2",
                    "value": "0x0002"
                },
                {
                    "comment": "4 8-bit values",
                    "name": "ComputeFormat8x4",
                    "value": "0x0003"
                },
                {
                    "comment": "1 16-bit value",
                    "name": "ComputeFormat16x1",
                    "value": "0x0004"
                },
                {
                    "comment": "2 16-bit values",
                    "name": "ComputeFormat16x2",
                    "value": "0x0005"
                },
                {
                    "comment": "4 16-bit values",
                    "name": "ComputeFormat16x4",
                    "value": "0x0006"
                },
                {
                    "comment": "1 32-bit value",
                    "name": "ComputeFormat32x1",
                    "value": "0x0007"
                },
                {
                    "comment": "2 32-bit values",
                    "name": "ComputeFormat32x2",
                    "value": "0x0008"
                },
                {
                    "comment": "4 32-bit values",
                    "name": "ComputeFormat32x4",
                    "value": "0x0009"
                },
                {
                    "name": "ComputeFormatShift",
                    "value": "0"
                },
                {
                    "name": "ComputeFormatMask",
                    "value": "0x000f"
                },
                {
                    "comment": "Type `int`.",
                    "name": "ComputeTypeInt",
                    "value": "0x0010"
                },
                {
                    "comment": "Type `uint`.",
                    "name": "ComputeTypeUint",
                    "value": "0x0020"
                },
                {
                    "comment": "Type `float`.",
                    "name": "ComputeTypeFloat",
                    "value": "0x0030"
                },
                {
                    "name": "ComputeTypeShift",
                    "value": "4"
                },
                {
                    "name": "ComputeTypeMask",
                    "value": "0x0030"
                },
                {
                    "name": "None",
                    "value": "0x0000"
                },
                {
                    "comment": "Buffer will be read by shader.",
                    "name": "ComputeRead",
                    "value": "0x0100"
                },
                {
                    "comment": "Buffer will be used for writing.",
                    "name": "ComputeWrite",
                    "value": "0x0200"
                },
                {
                    "comment": "Buffer will be used for storing draw indirect commands.",
                    "name": "DrawIndirect",
                    "value": "0x0400"
                },
                {
                    "comment": "Allow dynamic index/vertex buffer resize during update.",
                    "name": "AllowResize",
                    "value": "0x0800"
                },
                {
                    "comment": "Index buffer contains 32-bit indices.",
                    "name": "Index32",
                    "value": "0x1000"
                },
                {
                    "name": "ComputeReadWrite",
                    "value": "0x0300"
                }
            ]
        },
        {
            "data_type": "uint64",
            "name": "TextureFlags",
            "type": "bits",
            "values":
            [
                {
                    "name": "None",
                    "value": "0x0000000000000000"
                },
                {
                    "comment": "Texture will be used for MSAA sampling.",
                    "name": "MsaaSample",
                    "value": "0x0000000800000000"
                },
                {
                    "comment": "Render target no MSAA.",
                    "name": "Rt",
                    "value": "0x0000001000000000"
                },
                {
                    "comment": "Texture will be used for compute write.",
                    "name": "ComputeWrite",
                    "value": "0x0000100000000000"
                },
                {
                    "comment": "Sample texture as sRGB.",
                    "name": "Srgb",
                    "value": "0x0000200000000000"
                },
                {
                    "comment": "Texture will be used as blit destination.",
                    "name": "BlitDst",
                    "value": "0x0000400000000000"
                },
                {
                    "comment": "Texture will be used for read back from GPU.",
                    "name": "ReadBack",
                    "value": "0x0000800000000000"
                },
                {
                    "comment": "Render target MSAAx2 mode.",
                    "name": "RtMsaaX2",
                    "value": "0x0000002000000000"
                },
                {
                    "comment": "Render target MSAAx4 mode.",
                    "name": "RtMsaaX4",
                    "value": "0x0000003000000000"
                },
                {
                    "comment": "Render target MSAAx8 mode.",
                    "name": "RtMsaaX8",
                    "value": "0x0000004000000000"
                },
                {
                    "comment": "Render target MSAAx16 mode.",
                    "name": "RtMsaaX16",
                    "value": "0x0000005000000000"
                },
                {
                    "name": "RtMsaaShift",
                    "value": "36"
                },
                {
                    "name": "RtMsaaMask",
                    "value": "0x0000007000000000"
                },
                {
                    "comment": "Render target will be used for writing",
                    "name": "RtWriteOnly",
                    "value": "0x0000008000000000"
                },
                {
                    "name": "RtShift",
                    "value": "36"
                },
                {
                    "name": "RtMask",
                    "value": "0x000000f000000000"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "SamplerFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Wrap U mode: Mirror",
                    "name": "UMirror",
                    "value": "0x00000001"
                },
                {
                    "comment": "Wrap U mode: Clamp",
                    "name": "UClamp",
                    "value": "0x00000002"
                },
                {
                    "comment": "Wrap U mode: Border",
                    "name": "UBorder",
                    "value": "0x00000003"
                },
                {
                    "name": "UShift",
                    "value": "0"
                },
                {
                    "name": "UMask",
                    "value": "0x00000003"
                },
                {
                    "comment": "Wrap V mode: Mirror",
                    "name": "VMirror",
                    "value": "0x00000004"
                },
                {
                    "comment": "Wrap V mode: Clamp",
                    "name": "VClamp",
                    "value": "0x00000008"
                },
                {
                    "comment": "Wrap V mode: Border",
                    "name": "VBorder",
                    "value": "0x0000000c"
                },
                {
                    "name": "VShift",
                    "value": "2"
                },
                {
                    "name": "VMask",
                    "value": "0x0000000c"
                },
                {
                    "comment": "Wrap W mode: Mirror",
                    "name": "WMirror",
                    "value": "0x00000010"
                },
                {
                    "comment": "Wrap W mode: Clamp",
                    "name": "WClamp",
                    "value": "0x00000020"
                },
                {
                    "comment": "Wrap W mode: Border",
                    "name": "WBorder",
                    "value": "0x00000030"
                },
                {
                    "name": "WShift",
                    "value": "4"
                },
                {
                    "name": "WMask",
                    "value": "0x00000030"
                },
                {
                    "comment": "Min sampling mode: Point",
                    "name": "MinPoint",
                    "value": "0x00000040"
                },
                {
                    "comment": "Min sampling mode: Anisotropic",
                    "name": "MinAnisotropic",
                    "value": "0x00000080"
                },
                {
                    "name": "MinShift",
                    "value": "6"
                },
                {
                    "name": "MinMask",
                    "value": "0x000000c0"
                },
                {
                    "comment": "Mag sampling mode: Point",
                    "name": "MagPoint",
                    "value": "0x00000100"
                },
                {
                    "comment": "Mag sampling mode: Anisotropic",
                    "name": "MagAnisotropic",
                    "value": "0x00000200"
                },
                {
                    "name": "MagShift",
                    "value": "8"
                },
                {
                    "name": "MagMask",
                    "value": "0x00000300"
                },
                {
                    "comment": "Mip sampling mode: Point",
                    "name": "MipPoint",
                    "value": "0x00000400"
                },
                {
                    "name": "MipShift",
                    "value": "10"
                },
                {
                    "name": "MipMask",
                    "value": "0x00000400"
                },
                {
                    "comment": "Compare when sampling depth texture: less.",
                    "name": "CompareLess",
                    "value": "0x00010000"
                },
                {
                    "comment": "Compare when sampling depth texture: less or equal.",
                    "name": "CompareLequal",
                    "value": "0x00020000"
                },
                {
                    "comment": "Compare when sampling depth texture: equal.",
                    "name": "CompareEqual",
                    "value": "0x00030000"
                },
                {
                    "comment": "Compare when sampling depth texture: greater or equal.",
                    "name": "CompareGequal",
                    "value": "0x00040000"
                },
                {
                    "comment": "Compare when sampling depth texture: greater.",
                    "name": "CompareGreater",
                    "value": "0x00050000"
                },
                {
                    "comment": "Compare when sampling depth texture: not equal.",
                    "name": "CompareNotequal",
                    "value": "0x00060000"
                },
                {
                    "comment": "Compare when sampling depth texture: never.",
                    "name": "CompareNever",
                    "value": "0x00070000"
                },
                {
                    "comment": "Compare when sampling depth texture: always.",
                    "name": "CompareAlways",
                    "value": "0x00080000"
                },
                {
                    "name": "CompareShift",
                    "value": "16"
                },
                {
                    "name": "CompareMask",
                    "value": "0x000f0000"
                },
                {
                    "name": "BorderColorShift",
                    "value": "24"
                },
                {
                    "name": "BorderColorMask",
                    "value": "0x0f000000"
                },
                {
                    "name": "ReservedShift",
                    "value": "28"
                },
                {
                    "name": "ReservedMask",
                    "value": "0xf0000000"
                },
                {
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "comment": "Sample stencil instead of depth.",
                    "name": "SampleStencil",
                    "value": "0x00100000"
                },
                {
                    "name": "Point",
                    "value": "0x00000540"
                },
                {
                    "name": "UvwMirror",
                    "value": "0x00000015"
                },
                {
                    "name": "UvwClamp",
                    "value": "0x0000002a"
                },
                {
                    "name": "UvwBorder",
                    "value": "0x0000003f"
                },
                {
                    "name": "BitsMask",
                    "value": "0x000f07ff"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "ResetFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Enable 2x MSAA.",
                    "name": "MsaaX2",
                    "value": "0x00000010"
                },
                {
                    "comment": "Enable 4x MSAA.",
                    "name": "MsaaX4",
                    "value": "0x00000020"
                },
                {
                    "comment": "Enable 8x MSAA.",
                    "name": "MsaaX8",
                    "value": "0x00000030"
                },
                {
                    "comment": "Enable 16x MSAA.",
                    "name": "MsaaX16",
                    "value": "0x00000040"
                },
                {
                    "name": "MsaaShift",
                    "value": "4"
                },
                {
                    "name": "MsaaMask",
                    "value": "0x00000070"
                },
                {
                    "comment": "No reset flags.",
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "comment": "Not supported yet.",
                    "name": "Fullscreen",
                    "value": "0x00000001"
                },
                {
                    "comment": "Enable V-Sync.",
                    "name": "Vsync",
                    "value": "0x00000080"
                },
                {
                    "comment": "Turn on/off max anisotropy.",
                    "name": "Maxanisotropy",
                    "value": "0x00000100"
                },
                {
                    "comment": "Begin screen capture.",
                    "name": "Capture",
                    "value": "0x00000200"
                },
                {
                    "comment": "Flush rendering after submitting to GPU.",
                    "name": "FlushAfterRender",
                    "value": "0x00002000"
                },
                {
                    "comment": "This flag specifies where flip occurs. Default behaviour is that flip occurs\nbefore rendering new frame. This flag only has effect when `BGFX_CONFIG_MULTITHREADED=0`.",
                    "name": "FlipAfterRender",
                    "value": "0x00004000"
                },
                {
                    "comment": "Enable sRGB backbuffer.",
                    "name": "SrgbBackbuffer",
                    "value": "0x00008000"
                },
                {
                    "comment": "Enable HDR10 rendering.",
                    "name": "Hdr10",
                    "value": "0x00010000"
                },
                {
                    "comment": "Enable HiDPI rendering.",
                    "name": "Hidpi",
                    "value": "0x00020000"
                },
                {
                    "comment": "Enable depth clamp.",
                    "name": "DepthClamp",
                    "value": "0x00040000"
                },
                {
                    "comment": "Suspend rendering.",
                    "name": "Suspend",
                    "value": "0x00080000"
                },
                {
                    "comment": "Transparent backbuffer. Availability depends on: `BGFX_CAPS_TRANSPARENT_BACKBUFFER`.",
                    "name": "TransparentBackbuffer",
                    "value": "0x00100000"
                },
                {
                    "name": "FullscreenShift",
                    "value": "0"
                },
                {
                    "name": "FullscreenMask",
                    "value": "0x00000001"
                },
                {
                    "name": "ReservedShift",
                    "value": "31"
                },
                {
                    "name": "ReservedMask",
                    "value": "0x80000000"
                }
            ]
        },
        {
            "data_type": "uint64",
            "name": "CapsFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Alpha to coverage is supported.",
                    "name": "AlphaToCoverage",
                    "value": "0x0000000000000001"
                },
                {
                    "comment": "Blend independent is supported.",
                    "name": "BlendIndependent",
                    "value": "0x0000000000000002"
                },
                {
                    "comment": "Compute shaders are supported.",
                    "name": "Compute",
                    "value": "0x0000000000000004"
                },
                {
                    "comment": "Conservative rasterization is supported.",
                    "name": "ConservativeRaster",
                    "value": "0x0000000000000008"
                },
                {
                    "comment": "Draw indirect is supported.",
                    "name": "DrawIndirect",
                    "value": "0x0000000000000010"
                },
                {
                    "comment": "Fragment depth is available in fragment shader.",
                    "name": "FragmentDepth",
                    "value": "0x0000000000000020"
                },
                {
                    "comment": "Fragment ordering is available in fragment shader.",
                    "name": "FragmentOrdering",
                    "value": "0x0000000000000040"
                },
                {
                    "comment": "Graphics debugger is present.",
                    "name": "GraphicsDebugger",
                    "value": "0x0000000000000080"
                },
                {
                    "comment": "HDR10 rendering is supported.",
                    "name": "Hdr10",
                    "value": "0x0000000000000100"
                },
                {
                    "comment": "HiDPI rendering is supported.",
                    "name": "Hidpi",
                    "value": "0x0000000000000200"
                },
                {
                    "comment": "Image Read/Write is supported.",
                    "name": "ImageRw",
                    "value": "0x0000000000000400"
                },
                {
                    "comment": "32-bit indices are supported.",
                    "name": "Index32",
                    "value": "0x0000000000000800"
                },
                {
                    "comment": "Instancing is supported.",
                    "name": "Instancing",
                    "value": "0x0000000000001000"
                },
                {
                    "comment": "Occlusion query is supported.",
                    "name": "OcclusionQuery",
                    "value": "0x0000000000002000"
                },
                {
                    "comment": "Renderer is on separate thread.",
                    "name": "RendererMultithreaded",
                    "value": "0x0000000000004000"
                },
                {
                    "comment": "Multiple windows are supported.",
                    "name": "SwapChain",
                    "value": "0x0000000000008000"
                },
                {
                    "comment": "2D texture array is supported.",
                    "name": "Texture2dArray",
                    "value": "0x0000000000010000"
                },
                {
                    "comment": "3D textures are supported.",
                    "name": "Texture3d",
                    "value": "0x0000000000020000"
                },
                {
                    "comment": "Texture blit is supported.",
                    "name": "TextureBlit",
                    "value": "0x0000000000040000"
                },
                {
                    "comment": "Transparent back buffer supported.",
                    "name": "TransparentBackbuffer",
                    "value": "0x0000000000080000"
                },
                {
                    "name": "TextureCompareReserved",
                    "value": "0x0000000000100000"
                },
                {
                    "comment": "Texture compare less equal mode is supported.",
                    "name": "TextureCompareLequal",
                    "value": "0x0000000000200000"
                },
                {
                    "comment": "Cubemap texture array is supported.",
                    "name": "TextureCubeArray",
                    "value": "0x0000000000400000"
                },
                {
                    "comment": "CPU direct access to GPU texture memory.",
                    "name": "TextureDirectAccess",
                    "value": "0x0000000000800000"
                },
                {
                    "comment": "Read-back texture is supported.",
                    "name": "TextureReadBack",
                    "value": "0x0000000001000000"
                },
                {
                    "comment": "Vertex attribute half-float is supported.",
                    "name": "VertexAttribHalf",
                    "value": "0x0000000002000000"
                },
                {
                    "comment": "Vertex attribute 10_10_10_2 is supported.",
                    "name": "VertexAttribUint10",
                    "value": "0x0000000004000000"
                },
                {
                    "comment": "Rendering with VertexID only is supported.",
                    "name": "VertexId",
                    "value": "0x0000000008000000"
                },
                {
                    "comment": "PrimitiveID is available in fragment shader.",
                    "name": "PrimitiveId",
                    "value": "0x0000000010000000"
                },
                {
                    "comment": "Viewport layer is available in vertex shader.",
                    "name": "ViewportLayerArray",
                    "value": "0x0000000020000000"
                },
                {
                    "comment": "Draw indirect with indirect count is supported.",
                    "name": "DrawIndirectCount",
                    "value": "0x0000000040000000"
                },
                {
                    "comment": "All texture compare modes are supported.",
                    "name": "TextureCompareAll",
                    "value": "0x0000000000300000"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "CapsFormatFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Texture format is not supported.",
                    "name": "TextureNone",
                    "value": "0x00000000"
                },
                {
                    "comment": "Texture format is supported.",
                    "name": "Texture2d",
                    "value": "0x00000001"
                },
                {
                    "comment": "Texture as sRGB format is supported.",
                    "name": "Texture2dSrgb",
                    "value": "0x00000002"
                },
                {
                    "comment": "Texture format is emulated.",
                    "name": "Texture2dEmulated",
                    "value": "0x00000004"
                },
                {
                    "comment": "Texture format is supported.",
                    "name": "Texture3d",
                    "value": "0x00000008"
                },
                {
                    "comment": "Texture as sRGB format is supported.",
                    "name": "Texture3dSrgb",
                    "value": "0x00000010"
                },
                {
                    "comment": "Texture format is emulated.",
                    "name": "Texture3dEmulated",
                    "value": "0x00000020"
                },
                {
                    "comment": "Texture format is supported.",
                    "name": "TextureCube",
                    "value": "0x00000040"
                },
                {
                    "comment": "Texture as sRGB format is supported.",
                    "name": "TextureCubeSrgb",
                    "value": "0x00000080"
                },
                {
                    "comment": "Texture format is emulated.",
                    "name": "TextureCubeEmulated",
                    "value": "0x00000100"
                },
                {
                    "comment": "Texture format can be used from vertex shader.",
                    "name": "TextureVertex",
                    "value": "0x00000200"
                },
                {
                    "comment": "Texture format can be used as image and read from.",
                    "name": "TextureImageRead",
                    "value": "0x00000400"
                },
                {
                    "comment": "Texture format can be used as image and written to.",
                    "name": "TextureImageWrite",
                    "value": "0x00000800"
                },
                {
                    "comment": "Texture format can be used as frame buffer.",
                    "name": "TextureFramebuffer",
                    "value": "0x00001000"
                },
                {
                    "comment": "Texture format can be used as MSAA frame buffer.",
                    "name": "TextureFramebufferMsaa",
                    "value": "0x00002000"
                },
                {
                    "comment": "Texture can be sampled as MSAA.",
                    "name": "TextureMsaa",
                    "value": "0x00004000"
                },
                {
                    "comment": "Texture format supports auto-generated mips.",
                    "name": "TextureMipAutogen",
                    "value": "0x00008000"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "ResolveFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "No resolve flags.",
                    "name": "None",
                    "value": "0x00000000"
                },
                {
                    "comment": "Auto-generate mip maps on resolve.",
                    "name": "AutoGenMips",
                    "value": "0x00000001"
                }
            ]
        },
        {
            "data_type": "uint16",
            "name": "PciIdFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Autoselect adapter.",
                    "name": "None",
                    "value": "0x0000"
                },
                {
                    "comment": "Software rasterizer.",
                    "name": "SoftwareRasterizer",
                    "value": "0x0001"
                },
                {
                    "comment": "AMD adapter.",
                    "name": "Amd",
                    "value": "0x1002"
                },
                {
                    "comment": "Apple adapter.",
                    "name": "Apple",
                    "value": "0x106b"
                },
                {
                    "comment": "Intel adapter.",
                    "name": "Intel",
                    "value": "0x8086"
                },
                {
                    "comment": "nVidia adapter.",
                    "name": "Nvidia",
                    "value": "0x10de"
                },
                {
                    "comment": "Microsoft adapter.",
                    "name": "Microsoft",
                    "value": "0x1414"
                },
                {
                    "comment": "ARM adapter.",
                    "name": "Arm",
                    "value": "0x13b5"
                }
            ]
        },
        {
            "data_type": "uint32",
            "name": "CubeMapFlags",
            "type": "bits",
            "values":
            [
                {
                    "comment": "Cubemap +x.",
                    "name": "PositiveX",
                    "value": "0x00000000"
                },
                {
                    "comment": "Cubemap -x.",
                    "name": "NegativeX",
                    "value": "0x00000001"
                },
                {
                    "comment": "Cubemap +y.",
                    "name": "PositiveY",
                    "value": "0x00000002"
                },
                {
                    "comment": "Cubemap -y.",
                    "name": "NegativeY",
                    "value": "0x00000003"
                },
                {
                    "comment": "Cubemap +z.",
                    "name": "PositiveZ",
                    "value": "0x00000004"
                },
                {
                    "comment": "Cubemap -z.",
                    "name": "NegativeZ",
                    "value": "0x00000005"
                }
            ]
        },
        {
            "cname": "bgfx_fatal_t",
            "data_type": "uint32",
            "name": "Fatal",
            "type": "enum",
            "values":
            [
                {
                    "name": "DebugCheck",
                    "native": "BGFX_FATAL_DEBUGCHECK"
                },
                {
                    "name": "InvalidShader",
                    "native": "BGFX_FATAL_INVALIDSHADER"
                },
                {
                    "name": "UnableToInitialize",
                    "native": "BGFX_FATAL_UNABLETOINITIALIZE"
                },
                {
                    "name": "UnableToCreateTexture",
                    "native": "BGFX_FATAL_UNABLETOCREATETEXTURE"
                },
                {
                    "name": "DeviceLost",
                    "native": "BGFX_FATAL_DEVICELOST"
                },
                {
                    "name": "Count",
                    "native": "BGFX_FATAL_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_renderer_type_t",
            "data_type": "uint32",
            "name": "RendererType",
            "type": "enum",
            "values":
            [
                {
                    "comment": "No rendering.",
                    "name": "Noop",
                    "native": "BGFX_RENDERER_TYPE_NOOP"
                },
                {
                    "comment": "AGC",
                    "name": "Agc",
                    "native": "BGFX_RENDERER_TYPE_AGC"
                },
                {
                    "comment": "Direct3D 11.0",
                    "name": "Direct3D11",
                    "native": "BGFX_RENDERER_TYPE_DIRECT3D11"
                },
                {
                    "comment": "Direct3D 12.0",
                    "name": "Direct3D12",
                    "native": "BGFX_RENDERER_TYPE_DIRECT3D12"
                },
                {
                    "comment": "GNM",
                    "name": "Gnm",
                    "native": "BGFX_RENDERER_TYPE_GNM"
                },
                {
                    "comment": "Metal",
                    "name": "Metal",
                    "native": "BGFX_RENDERER_TYPE_METAL"
                },
                {
                    "comment": "NVN",
                    "name": "Nvn",
                    "native": "BGFX_RENDERER_TYPE_NVN"
                },
                {
                    "comment": "OpenGL ES 2.0+",
                    "name": "OpenGLES",
                    "native": "BGFX_RENDERER_TYPE_OPENGLES"
                },
                {
                    "comment": "OpenGL 2.1+",
                    "name": "OpenGL",
                    "native": "BGFX_RENDERER_TYPE_OPENGL"
                },
                {
                    "comment": "Vulkan",
                    "name": "Vulkan",
                    "native": "BGFX_RENDERER_TYPE_VULKAN"
                },
                {
                    "name": "Count",
                    "native": "BGFX_RENDERER_TYPE_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_access_t",
            "data_type": "uint32",
            "name": "Access",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Read.",
                    "name": "Read",
                    "native": "BGFX_ACCESS_READ"
                },
                {
                    "comment": "Write.",
                    "name": "Write",
                    "native": "BGFX_ACCESS_WRITE"
                },
                {
                    "comment": "Read and write.",
                    "name": "ReadWrite",
                    "native": "BGFX_ACCESS_READWRITE"
                },
                {
                    "name": "Count",
                    "native": "BGFX_ACCESS_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_attrib_t",
            "data_type": "uint32",
            "name": "Attrib",
            "type": "enum",
            "values":
            [
                {
                    "comment": "a_position",
                    "name": "Position",
                    "native": "BGFX_ATTRIB_POSITION"
                },
                {
                    "comment": "a_normal",
                    "name": "Normal",
                    "native": "BGFX_ATTRIB_NORMAL"
                },
                {
                    "comment": "a_tangent",
                    "name": "Tangent",
                    "native": "BGFX_ATTRIB_TANGENT"
                },
                {
                    "comment": "a_bitangent",
                    "name": "Bitangent",
                    "native": "BGFX_ATTRIB_BITANGENT"
                },
                {
                    "comment": "a_color0",
                    "name": "Color0",
                    "native": "BGFX_ATTRIB_COLOR0"
                },
                {
                    "comment": "a_color1",
                    "name": "Color1",
                    "native": "BGFX_ATTRIB_COLOR1"
                },
                {
                    "comment": "a_color2",
                    "name": "Color2",
                    "native": "BGFX_ATTRIB_COLOR2"
                },
                {
                    "comment": "a_color3",
                    "name": "Color3",
                    "native": "BGFX_ATTRIB_COLOR3"
                },
                {
                    "comment": "a_indices",
                    "name": "Indices",
                    "native": "BGFX_ATTRIB_INDICES"
                },
                {
                    "comment": "a_weight",
                    "name": "Weight",
                    "native": "BGFX_ATTRIB_WEIGHT"
                },
                {
                    "comment": "a_texcoord0",
                    "name": "TexCoord0",
                    "native": "BGFX_ATTRIB_TEXCOORD0"
                },
                {
                    "comment": "a_texcoord1",
                    "name": "TexCoord1",
                    "native": "BGFX_ATTRIB_TEXCOORD1"
                },
                {
                    "comment": "a_texcoord2",
                    "name": "TexCoord2",
                    "native": "BGFX_ATTRIB_TEXCOORD2"
                },
                {
                    "comment": "a_texcoord3",
                    "name": "TexCoord3",
                    "native": "BGFX_ATTRIB_TEXCOORD3"
                },
                {
                    "comment": "a_texcoord4",
                    "name": "TexCoord4",
                    "native": "BGFX_ATTRIB_TEXCOORD4"
                },
                {
                    "comment": "a_texcoord5",
                    "name": "TexCoord5",
                    "native": "BGFX_ATTRIB_TEXCOORD5"
                },
                {
                    "comment": "a_texcoord6",
                    "name": "TexCoord6",
                    "native": "BGFX_ATTRIB_TEXCOORD6"
                },
                {
                    "comment": "a_texcoord7",
                    "name": "TexCoord7",
                    "native": "BGFX_ATTRIB_TEXCOORD7"
                },
                {
                    "name": "Count",
                    "native": "BGFX_ATTRIB_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_attrib_type_t",
            "data_type": "uint32",
            "name": "AttribType",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Uint8",
                    "name": "Uint8",
                    "native": "BGFX_ATTRIB_TYPE_UINT8"
                },
                {
                    "comment": "Uint10, availability depends on: `BGFX_CAPS_VERTEX_ATTRIB_UINT10`.",
                    "name": "Uint10",
                    "native": "BGFX_ATTRIB_TYPE_UINT10"
                },
                {
                    "comment": "Int16",
                    "name": "Int16",
                    "native": "BGFX_ATTRIB_TYPE_INT16"
                },
                {
                    "comment": "Half, availability depends on: `BGFX_CAPS_VERTEX_ATTRIB_HALF`.",
                    "name": "Half",
                    "native": "BGFX_ATTRIB_TYPE_HALF"
                },
                {
                    "comment": "Float",
                    "name": "Float",
                    "native": "BGFX_ATTRIB_TYPE_FLOAT"
                },
                {
                    "name": "Count",
                    "native": "BGFX_ATTRIB_TYPE_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_texture_format_t",
            "data_type": "uint32",
            "name": "TextureFormat",
            "type": "enum",
            "values":
            [
                {
                    "comment": "DXT1 R5G6B5A1",
                    "name": "BC1",
                    "native": "BGFX_TEXTURE_FORMAT_BC1"
                },
                {
                    "comment": "DXT3 R5G6B5A4",
                    "name": "BC2",
                    "native": "BGFX_TEXTURE_FORMAT_BC2"
                },
                {
                    "comment": "DXT5 R5G6B5A8",
                    "name": "BC3",
                    "native": "BGFX_TEXTURE_FORMAT_BC3"
                },
                {
                    "comment": "LATC1/ATI1 R8",
                    "name": "BC4",
                    "native": "BGFX_TEXTURE_FORMAT_BC4"
                },
                {
                    "comment": "LATC2/ATI2 RG8",
                    "name": "BC5",
                    "native": "BGFX_TEXTURE_FORMAT_BC5"
                },
                {
                    "comment": "BC6H RGB16F",
                    "name": "BC6H",
                    "native": "BGFX_TEXTURE_FORMAT_BC6H"
                },
                {
                    "comment": "BC7 RGB 4-7 bits per color channel, 0-8 bits alpha",
                    "name": "BC7",
                    "native": "BGFX_TEXTURE_FORMAT_BC7"
                },
                {
                    "comment": "ETC1 RGB8",
                    "name": "ETC1",
                    "native": "BGFX_TEXTURE_FORMAT_ETC1"
                },
                {
                    "comment": "ETC2 RGB8",
                    "name": "ETC2",
                    "native": "BGFX_TEXTURE_FORMAT_ETC2"
                },
                {
                    "comment": "ETC2 RGBA8",
                    "name": "ETC2A",
                    "native": "BGFX_TEXTURE_FORMAT_ETC2A"
                },
                {
                    "comment": "ETC2 RGB8A1",
                    "name": "ETC2A1",
                    "native": "BGFX_TEXTURE_FORMAT_ETC2A1"
                },
                {
                    "comment": "PVRTC1 RGB 2BPP",
                    "name": "PTC12",
                    "native": "BGFX_TEXTURE_FORMAT_PTC12"
                },
                {
                    "comment": "PVRTC1 RGB 4BPP",
                    "name": "PTC14",
                    "native": "BGFX_TEXTURE_FORMAT_PTC14"
                },
                {
                    "comment": "PVRTC1 RGBA 2BPP",
                    "name": "PTC12A",
                    "native": "BGFX_TEXTURE_FORMAT_PTC12A"
                },
                {
                    "comment": "PVRTC1 RGBA 4BPP",
                    "name": "PTC14A",
                    "native": "BGFX_TEXTURE_FORMAT_PTC14A"
                },
                {
                    "comment": "PVRTC2 RGBA 2BPP",
                    "name": "PTC22",
                    "native": "BGFX_TEXTURE_FORMAT_PTC22"
                },
                {
                    "comment": "PVRTC2 RGBA 4BPP",
                    "name": "PTC24",
                    "native": "BGFX_TEXTURE_FORMAT_PTC24"
                },
                {
                    "comment": "ATC RGB 4BPP",
                    "name": "ATC",
                    "native": "BGFX_TEXTURE_FORMAT_ATC"
                },
                {
                    "comment": "ATCE RGBA 8 BPP explicit alpha",
                    "name": "ATCE",
                    "native": "BGFX_TEXTURE_FORMAT_ATCE"
                },
                {
                    "comment": "ATCI RGBA 8 BPP interpolated alpha",
                    "name": "ATCI",
                    "native": "BGFX_TEXTURE_FORMAT_ATCI"
                },
                {
                    "comment": "ASTC 4x4 8.0 BPP",
                    "name": "ASTC4x4",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC4X4"
                },
                {
                    "comment": "ASTC 5x4 6.40 BPP",
                    "name": "ASTC5x4",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC5X4"
                },
                {
                    "comment": "ASTC 5x5 5.12 BPP",
                    "name": "ASTC5x5",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC5X5"
                },
                {
                    "comment": "ASTC 6x5 4.27 BPP",
                    "name": "ASTC6x5",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC6X5"
                },
                {
                    "comment": "ASTC 6x6 3.56 BPP",
                    "name": "ASTC6x6",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC6X6"
                },
                {
                    "comment": "ASTC 8x5 3.20 BPP",
                    "name": "ASTC8x5",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC8X5"
                },
                {
                    "comment": "ASTC 8x6 2.67 BPP",
                    "name": "ASTC8x6",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC8X6"
                },
                {
                    "comment": "ASTC 8x8 2.00 BPP",
                    "name": "ASTC8x8",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC8X8"
                },
                {
                    "comment": "ASTC 10x5 2.56 BPP",
                    "name": "ASTC10x5",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC10X5"
                },
                {
                    "comment": "ASTC 10x6 2.13 BPP",
                    "name": "ASTC10x6",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC10X6"
                },
                {
                    "comment": "ASTC 10x8 1.60 BPP",
                    "name": "ASTC10x8",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC10X8"
                },
                {
                    "comment": "ASTC 10x10 1.28 BPP",
                    "name": "ASTC10x10",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC10X10"
                },
                {
                    "comment": "ASTC 12x10 1.07 BPP",
                    "name": "ASTC12x10",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC12X10"
                },
                {
                    "comment": "ASTC 12x12 0.89 BPP",
                    "name": "ASTC12x12",
                    "native": "BGFX_TEXTURE_FORMAT_ASTC12X12"
                },
                {
                    "comment": "Compressed formats above.",
                    "name": "Unknown",
                    "native": "BGFX_TEXTURE_FORMAT_UNKNOWN"
                },
                {
                    "name": "R1",
                    "native": "BGFX_TEXTURE_FORMAT_R1"
                },
                {
                    "name": "A8",
                    "native": "BGFX_TEXTURE_FORMAT_A8"
                },
                {
                    "name": "R8",
                    "native": "BGFX_TEXTURE_FORMAT_R8"
                },
                {
                    "name": "R8I",
                    "native": "BGFX_TEXTURE_FORMAT_R8I"
                },
                {
                    "name": "R8U",
                    "native": "BGFX_TEXTURE_FORMAT_R8U"
                },
                {
                    "name": "R8S",
                    "native": "BGFX_TEXTURE_FORMAT_R8S"
                },
                {
                    "name": "R16",
                    "native": "BGFX_TEXTURE_FORMAT_R16"
                },
                {
                    "name": "R16I",
                    "native": "BGFX_TEXTURE_FORMAT_R16I"
                },
                {
                    "name": "R16U",
                    "native": "BGFX_TEXTURE_FORMAT_R16U"
                },
                {
                    "name": "R16F",
                    "native": "BGFX_TEXTURE_FORMAT_R16F"
                },
                {
                    "name": "R16S",
                    "native": "BGFX_TEXTURE_FORMAT_R16S"
                },
                {
                    "name": "R32I",
                    "native": "BGFX_TEXTURE_FORMAT_R32I"
                },
                {
                    "name": "R32U",
                    "native": "BGFX_TEXTURE_FORMAT_R32U"
                },
                {
                    "name": "R32F",
                    "native": "BGFX_TEXTURE_FORMAT_R32F"
                },
                {
                    "name": "RG8",
                    "native": "BGFX_TEXTURE_FORMAT_RG8"
                },
                {
                    "name": "RG8I",
                    "native": "BGFX_TEXTURE_FORMAT_RG8I"
                },
                {
                    "name": "RG8U",
                    "native": "BGFX_TEXTURE_FORMAT_RG8U"
                },
                {
                    "name": "RG8S",
                    "native": "BGFX_TEXTURE_FORMAT_RG8S"
                },
                {
                    "name": "RG16",
                    "native": "BGFX_TEXTURE_FORMAT_RG16"
                },
                {
                    "name": "RG16I",
                    "native": "BGFX_TEXTURE_FORMAT_RG16I"
                },
                {
                    "name": "RG16U",
                    "native": "BGFX_TEXTURE_FORMAT_RG16U"
                },
                {
                    "name": "RG16F",
                    "native": "BGFX_TEXTURE_FORMAT_RG16F"
                },
                {
                    "name": "RG16S",
                    "native": "BGFX_TEXTURE_FORMAT_RG16S"
                },
                {
                    "name": "RG32I",
                    "native": "BGFX_TEXTURE_FORMAT_RG32I"
                },
                {
                    "name": "RG32U",
                    "native": "BGFX_TEXTURE_FORMAT_RG32U"
                },
                {
                    "name": "RG32F",
                    "native": "BGFX_TEXTURE_FORMAT_RG32F"
                },
                {
                    "name": "RGB8",
                    "native": "BGFX_TEXTURE_FORMAT_RGB8"
                },
                {
                    "name": "RGB8I",
                    "native": "BGFX_TEXTURE_FORMAT_RGB8I"
                },
                {
                    "name": "RGB8U",
                    "native": "BGFX_TEXTURE_FORMAT_RGB8U"
                },
                {
                    "name": "RGB8S",
                    "native": "BGFX_TEXTURE_FORMAT_RGB8S"
                },
                {
                    "name": "RGB9E5F",
                    "native": "BGFX_TEXTURE_FORMAT_RGB9E5F"
                },
                {
                    "name": "BGRA8",
                    "native": "BGFX_TEXTURE_FORMAT_BGRA8"
                },
                {
                    "name": "RGBA8",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA8"
                },
                {
                    "name": "RGBA8I",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA8I"
                },
                {
                    "name": "RGBA8U",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA8U"
                },
                {
                    "name": "RGBA8S",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA8S"
                },
                {
                    "name": "RGBA16",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA16"
                },
                {
                    "name": "RGBA16I",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA16I"
                },
                {
                    "name": "RGBA16U",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA16U"
                },
                {
                    "name": "RGBA16F",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA16F"
                },
                {
                    "name": "RGBA16S",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA16S"
                },
                {
                    "name": "RGBA32I",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA32I"
                },
                {
                    "name": "RGBA32U",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA32U"
                },
                {
                    "name": "RGBA32F",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA32F"
                },
                {
                    "name": "B5G6R5",
                    "native": "BGFX_TEXTURE_FORMAT_B5G6R5"
                },
                {
                    "name": "R5G6B5",
                    "native": "BGFX_TEXTURE_FORMAT_R5G6B5"
                },
                {
                    "name": "BGRA4",
                    "native": "BGFX_TEXTURE_FORMAT_BGRA4"
                },
                {
                    "name": "RGBA4",
                    "native": "BGFX_TEXTURE_FORMAT_RGBA4"
                },
                {
                    "name": "BGR5A1",
                    "native": "BGFX_TEXTURE_FORMAT_BGR5A1"
                },
                {
                    "name": "RGB5A1",
                    "native": "BGFX_TEXTURE_FORMAT_RGB5A1"
                },
                {
                    "name": "RGB10A2",
                    "native": "BGFX_TEXTURE_FORMAT_RGB10A2"
                },
                {
                    "name": "RG11B10F",
                    "native": "BGFX_TEXTURE_FORMAT_RG11B10F"
                },
                {
                    "comment": "Depth formats below.",
                    "name": "UnknownDepth",
                    "native": "BGFX_TEXTURE_FORMAT_UNKNOWNDEPTH"
                },
                {
                    "name": "D16",
                    "native": "BGFX_TEXTURE_FORMAT_D16"
                },
                {
                    "name": "D24",
                    "native": "BGFX_TEXTURE_FORMAT_D24"
                },
                {
                    "name": "D24S8",
                    "native": "BGFX_TEXTURE_FORMAT_D24S8"
                },
                {
                    "name": "D32",
                    "native": "BGFX_TEXTURE_FORMAT_D32"
                },
                {
                    "name": "D16F",
                    "native": "BGFX_TEXTURE_FORMAT_D16F"
                },
                {
                    "name": "D24F",
                    "native": "BGFX_TEXTURE_FORMAT_D24F"
                },
                {
                    "name": "D32F",
                    "native": "BGFX_TEXTURE_FORMAT_D32F"
                },
                {
                    "name": "D0S8",
                    "native": "BGFX_TEXTURE_FORMAT_D0S8"
                },
                {
                    "name": "Count",
                    "native": "BGFX_TEXTURE_FORMAT_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_uniform_type_t",
            "data_type": "uint32",
            "name": "UniformType",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Sampler.",
                    "name": "Sampler",
                    "native": "BGFX_UNIFORM_TYPE_SAMPLER"
                },
                {
                    "comment": "Reserved, do not use.",
                    "name": "End",
                    "native": "BGFX_UNIFORM_TYPE_END"
                },
                {
                    "comment": "4 floats vector.",
                    "name": "Vec4",
                    "native": "BGFX_UNIFORM_TYPE_VEC4"
                },
                {
                    "comment": "3x3 matrix.",
                    "name": "Mat3",
                    "native": "BGFX_UNIFORM_TYPE_MAT3"
                },
                {
                    "comment": "4x4 matrix.",
                    "name": "Mat4",
                    "native": "BGFX_UNIFORM_TYPE_MAT4"
                },
                {
                    "name": "Count",
                    "native": "BGFX_UNIFORM_TYPE_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_backbuffer_ratio_t",
            "data_type": "uint32",
            "name": "BackbufferRatio",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Equal to backbuffer.",
                    "name": "Equal",
                    "native": "BGFX_BACKBUFFER_RATIO_EQUAL"
                },
                {
                    "comment": "One half size of backbuffer.",
                    "name": "Half",
                    "native": "BGFX_BACKBUFFER_RATIO_HALF"
                },
                {
                    "comment": "One quarter size of backbuffer.",
                    "name": "Quarter",
                    "native": "BGFX_BACKBUFFER_RATIO_QUARTER"
                },
                {
                    "comment": "One eighth size of backbuffer.",
                    "name": "Eighth",
                    "native": "BGFX_BACKBUFFER_RATIO_EIGHTH"
                },
                {
                    "comment": "One sixteenth size of backbuffer.",
                    "name": "Sixteenth",
                    "native": "BGFX_BACKBUFFER_RATIO_SIXTEENTH"
                },
                {
                    "comment": "Double size of backbuffer.",
                    "name": "Double",
                    "native": "BGFX_BACKBUFFER_RATIO_DOUBLE"
                },
                {
                    "name": "Count",
                    "native": "BGFX_BACKBUFFER_RATIO_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_occlusion_query_result_t",
            "data_type": "uint32",
            "name": "OcclusionQueryResult",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Query failed test.",
                    "name": "Invisible",
                    "native": "BGFX_OCCLUSION_QUERY_RESULT_INVISIBLE"
                },
                {
                    "comment": "Query passed test.",
                    "name": "Visible",
                    "native": "BGFX_OCCLUSION_QUERY_RESULT_VISIBLE"
                },
                {
                    "comment": "Query result is not available yet.",
                    "name": "NoResult",
                    "native": "BGFX_OCCLUSION_QUERY_RESULT_NORESULT"
                },
                {
                    "name": "Count",
                    "native": "BGFX_OCCLUSION_QUERY_RESULT_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_topology_t",
            "data_type": "uint32",
            "name": "Topology",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Triangle list.",
                    "name": "TriList",
                    "native": "BGFX_TOPOLOGY_TRILIST"
                },
                {
                    "comment": "Triangle strip.",
                    "name": "TriStrip",
                    "native": "BGFX_TOPOLOGY_TRISTRIP"
                },
                {
                    "comment": "Line list.",
                    "name": "LineList",
                    "native": "BGFX_TOPOLOGY_LINELIST"
                },
                {
                    "comment": "Line strip.",
                    "name": "LineStrip",
                    "native": "BGFX_TOPOLOGY_LINESTRIP"
                },
                {
                    "comment": "Point list.",
                    "name": "PointList",
                    "native": "BGFX_TOPOLOGY_POINTLIST"
                },
                {
                    "name": "Count",
                    "native": "BGFX_TOPOLOGY_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_topology_convert_t",
            "data_type": "uint32",
            "name": "TopologyConvert",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Flip winding order of triangle list.",
                    "name": "TriListFlipWinding",
                    "native": "BGFX_TOPOLOGY_CONVERT_TRILISTFLIPWINDING"
                },
                {
                    "comment": "Flip winding order of triangle strip.",
                    "name": "TriStripFlipWinding",
                    "native": "BGFX_TOPOLOGY_CONVERT_TRISTRIPFLIPWINDING"
                },
                {
                    "comment": "Convert triangle list to line list.",
                    "name": "TriListToLineList",
                    "native": "BGFX_TOPOLOGY_CONVERT_TRILISTTOLINELIST"
                },
                {
                    "comment": "Convert triangle strip to triangle list.",
                    "name": "TriStripToTriList",
                    "native": "BGFX_TOPOLOGY_CONVERT_TRISTRIPTOTRILIST"
                },
                {
                    "comment": "Convert line strip to line list.",
                    "name": "LineStripToLineList",
                    "native": "BGFX_TOPOLOGY_CONVERT_LINESTRIPTOLINELIST"
                },
                {
                    "name": "Count",
                    "native": "BGFX_TOPOLOGY_CONVERT_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_topology_sort_t",
            "data_type": "uint32",
            "name": "TopologySort",
            "type": "enum",
            "values":
            [
                {
                    "name": "DirectionFrontToBackMin",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONFRONTTOBACKMIN"
                },
                {
                    "name": "DirectionFrontToBackAvg",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONFRONTTOBACKAVG"
                },
                {
                    "name": "DirectionFrontToBackMax",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONFRONTTOBACKMAX"
                },
                {
                    "name": "DirectionBackToFrontMin",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONBACKTOFRONTMIN"
                },
                {
                    "name": "DirectionBackToFrontAvg",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONBACKTOFRONTAVG"
                },
                {
                    "name": "DirectionBackToFrontMax",
                    "native": "BGFX_TOPOLOGY_SORT_DIRECTIONBACKTOFRONTMAX"
                },
                {
                    "name": "DistanceFrontToBackMin",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEFRONTTOBACKMIN"
                },
                {
                    "name": "DistanceFrontToBackAvg",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEFRONTTOBACKAVG"
                },
                {
                    "name": "DistanceFrontToBackMax",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEFRONTTOBACKMAX"
                },
                {
                    "name": "DistanceBackToFrontMin",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEBACKTOFRONTMIN"
                },
                {
                    "name": "DistanceBackToFrontAvg",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEBACKTOFRONTAVG"
                },
                {
                    "name": "DistanceBackToFrontMax",
                    "native": "BGFX_TOPOLOGY_SORT_DISTANCEBACKTOFRONTMAX"
                },
                {
                    "name": "Count",
                    "native": "BGFX_TOPOLOGY_SORT_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_view_mode_t",
            "data_type": "uint32",
            "name": "ViewMode",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Default sort order.",
                    "name": "Default",
                    "native": "BGFX_VIEW_MODE_DEFAULT"
                },
                {
                    "comment": "Sort in the same order in which submit calls were called.",
                    "name": "Sequential",
                    "native": "BGFX_VIEW_MODE_SEQUENTIAL"
                },
                {
                    "comment": "Sort draw call depth in ascending order.",
                    "name": "DepthAscending",
                    "native": "BGFX_VIEW_MODE_DEPTHASCENDING"
                },
                {
                    "comment": "Sort draw call depth in descending order.",
                    "name": "DepthDescending",
                    "native": "BGFX_VIEW_MODE_DEPTHDESCENDING"
                },
                {
                    "name": "Count",
                    "native": "BGFX_VIEW_MODE_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_native_window_handle_type_t",
            "data_type": "uint32",
            "name": "NativeWindowHandleType",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Platform default handle type (X11 on Linux).",
                    "name": "Default",
                    "native": "BGFX_NATIVE_WINDOW_HANDLE_TYPE_DEFAULT"
                },
                {
                    "comment": "Wayland.",
                    "name": "Wayland",
                    "native": "BGFX_NATIVE_WINDOW_HANDLE_TYPE_WAYLAND"
                },
                {
                    "name": "Count",
                    "native": "BGFX_NATIVE_WINDOW_HANDLE_TYPE_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_render_frame_t",
            "data_type": "uint32",
            "name": "RenderFrame",
            "type": "enum",
            "values":
            [
                {
                    "comment": "Renderer context is not created yet.",
                    "name": "NoContext",
                    "native": "BGFX_RENDER_FRAME_NOCONTEXT"
                },
                {
                    "comment": "Renderer context is created and rendering.",
                    "name": "Render",
                    "native": "BGFX_RENDER_FRAME_RENDER"
                },
                {
                    "comment": "Renderer context wait for main thread signal timed out without rendering.",
                    "name": "Timeout",
                    "native": "BGFX_RENDER_FRAME_TIMEOUT"
                },
                {
                    "comment": "Renderer context is getting destroyed.",
                    "name": "Exiting",
                    "native": "BGFX_RENDER_FRAME_EXITING"
                },
                {
                    "name": "Count",
                    "native": "BGFX_RENDER_FRAME_COUNT"
                }
            ]
        },
        {
            "cname": "bgfx_caps_gpu_t",
            "members":
            [
                {
                    "data_type": "uint16_t",
                    "name": "vendorId"
                },
                {
                    "data_type": "uint16_t",
                    "name": "deviceId"
                }
            ],
            "name": "CapsGPU",
            "type": "struct"
        },
        {
            "cname": "bgfx_caps_limits_t",
            "members":
            [
                {
                    "data_type": "uint32_t",
                    "name": "maxDrawCalls"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxBlits"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxTextureSize"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxTextureLayers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxViews"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxFrameBuffers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxFBAttachments"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxPrograms"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxShaders"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxTextures"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxTextureSamplers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxComputeBindings"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxVertexLayouts"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxVertexStreams"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxIndexBuffers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxVertexBuffers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxDynamicIndexBuffers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxDynamicVertexBuffers"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxUniforms"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxOcclusionQueries"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxEncoders"
                },
                {
                    "data_type": "uint32_t",
                    "name": "minResourceCbSize"
                },
                {
                    "data_type": "uint32_t",
                    "name": "transientVbSize"
                },
                {
                    "data_type": "uint32_t",
                    "name": "transientIbSize"
                }
            ],
            "name": "CapsLimits",
            "type": "struct"
        },
        {
            "cname": "bgfx_caps_t",
            "members":
            [
                {
                    "data_type": "RendererType::Enum",
                    "name": "rendererType"
                },
                {
                    "data_type": "uint64_t",
                    "name": "supported"
                },
                {
                    "data_type": "uint16_t",
                    "name": "vendorId"
                },
                {
                    "data_type": "uint16_t",
                    "name": "deviceId"
                },
                {
                    "data_type": "bool",
                    "name": "homogeneousDepth"
                },
                {
                    "data_type": "bool",
                    "name": "originBottomLeft"
                },
                {
                    "data_type": "uint8_t",
                    "name": "numGPUs"
                },
                {
                    "data_type": "CapsGPU[4]",
                    "name": "gpu"
                },
                {
                    "data_type": "CapsLimits",
                    "name": "limits"
                },
                {
                    "data_type": "uint16_t[96]",
                    "name": "formats"
                }
            ],
            "name": "Caps",
            "type": "struct"
        },
        {
            "cname": "bgfx_internal_data_t",
            "members":
            [
                {
                    "data_type": "const Caps*",
                    "name": "caps"
                },
                {
                    "data_type": "void*",
                    "name": "context"
                }
            ],
            "name": "InternalData",
            "type": "struct"
        },
        {
            "cname": "bgfx_platform_data_t",
            "members":
            [
                {
                    "data_type": "void*",
                    "name": "ndt"
                },
                {
                    "data_type": "void*",
                    "name": "nwh"
                },
                {
                    "data_type": "void*",
                    "name": "context"
                },
                {
                    "data_type": "void*",
                    "name": "backBuffer"
                },
                {
                    "data_type": "void*",
                    "name": "backBufferDS"
                },
                {
                    "data_type": "NativeWindowHandleType::Enum",
                    "name": "type"
                }
            ],
            "name": "PlatformData",
            "type": "struct"
        },
        {
            "cname": "bgfx_resolution_t",
            "members":
            [
                {
                    "data_type": "TextureFormat::Enum",
                    "name": "format"
                },
                {
                    "data_type": "uint32_t",
                    "name": "width"
                },
                {
                    "data_type": "uint32_t",
                    "name": "height"
                },
                {
                    "data_type": "uint32_t",
                    "name": "reset"
                },
                {
                    "data_type": "uint8_t",
                    "name": "numBackBuffers"
                },
                {
                    "data_type": "uint8_t",
                    "name": "maxFrameLatency"
                },
                {
                    "data_type": "uint8_t",
                    "name": "debugTextScale"
                }
            ],
            "name": "Resolution",
            "type": "struct"
        },
        {
            "cname": "bgfx_init_limits_t",
            "members":
            [
                {
                    "data_type": "uint16_t",
                    "name": "maxEncoders"
                },
                {
                    "data_type": "uint32_t",
                    "name": "minResourceCbSize"
                },
                {
                    "data_type": "uint32_t",
                    "name": "transientVbSize"
                },
                {
                    "data_type": "uint32_t",
                    "name": "transientIbSize"
                }
            ],
            "name": "InitLimits",
            "type": "struct"
        },
        {
            "cname": "bgfx_init_t",
            "members":
            [
                {
                    "data_type": "RendererType::Enum",
                    "name": "type"
                },
                {
                    "data_type": "uint16_t",
                    "name": "vendorId"
                },
                {
                    "data_type": "uint16_t",
                    "name": "deviceId"
                },
                {
                    "data_type": "uint64_t",
                    "name": "capabilities"
                },
                {
                    "data_type": "bool",
                    "name": "debug"
                },
                {
                    "data_type": "bool",
                    "name": "profile"
                },
                {
                    "data_type": "PlatformData",
                    "name": "platformData"
                },
                {
                    "data_type": "Resolution",
                    "name": "resolution"
                },
                {
                    "data_type": "InitLimits",
                    "name": "limits"
                },
                {
                    "data_type": "CallbackI*",
                    "name": "callback"
                },
                {
                    "data_type": "bx::AllocatorI*",
                    "name": "allocator"
                }
            ],
            "name": "Init",
            "type": "struct"
        },
        {
            "cname": "bgfx_memory_t",
            "members":
            [
                {
                    "data_type": "uint8_t*",
                    "name": "data"
                },
                {
                    "data_type": "uint32_t",
                    "name": "size"
                }
            ],
            "name": "Memory",
            "type": "struct"
        },
        {
            "cname": "bgfx_transient_index_buffer_t",
            "members":
            [
                {
                    "data_type": "uint8_t*",
                    "name": "data"
                },
                {
                    "data_type": "uint32_t",
                    "name": "size"
                },
                {
                    "data_type": "uint32_t",
                    "name": "startIndex"
                },
                {
                    "data_type": "IndexBufferHandle",
                    "name": "handle"
                },
                {
                    "data_type": "bool",
                    "name": "isIndex16"
                }
            ],
            "name": "TransientIndexBuffer",
            "type": "struct"
        },
        {
            "cname": "bgfx_transient_vertex_buffer_t",
            "members":
            [
                {
                    "data_type": "uint8_t*",
                    "name": "data"
                },
                {
                    "data_type": "uint32_t",
                    "name": "size"
                },
                {
                    "data_type": "uint32_t",
                    "name": "startVertex"
                },
                {
                    "data_type": "uint16_t",
                    "name": "stride"
                },
                {
                    "data_type": "VertexBufferHandle",
                    "name": "handle"
                },
                {
                    "data_type": "VertexLayoutHandle",
                    "name": "layoutHandle"
                }
            ],
            "name": "TransientVertexBuffer",
            "type": "struct"
        },
        {
            "cname": "bgfx_instance_data_buffer_t",
            "members":
            [
                {
                    "data_type": "uint8_t*",
                    "name": "data"
                },
                {
                    "data_type": "uint32_t",
                    "name": "size"
                },
                {
                    "data_type": "uint32_t",
                    "name": "offset"
                },
                {
                    "data_type": "uint32_t",
                    "name": "num"
                },
                {
                    "data_type": "uint16_t",
                    "name": "stride"
                },
                {
                    "data_type": "VertexBufferHandle",
                    "name": "handle"
                }
            ],
            "name": "InstanceDataBuffer",
            "type": "struct"
        },
        {
            "cname": "bgfx_texture_info_t",
            "members":
            [
                {
                    "data_type": "TextureFormat::Enum",
                    "name": "format"
                },
                {
                    "data_type": "uint32_t",
                    "name": "storageSize"
                },
                {
                    "data_type": "uint16_t",
                    "name": "width"
                },
                {
                    "data_type": "uint16_t",
                    "name": "height"
                },
                {
                    "data_type": "uint16_t",
                    "name": "depth"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numLayers"
                },
                {
                    "data_type": "uint8_t",
                    "name": "numMips"
                },
                {
                    "data_type": "uint8_t",
                    "name": "bitsPerPixel"
                },
                {
                    "data_type": "bool",
                    "name": "cubeMap"
                }
            ],
            "name": "TextureInfo",
            "type": "struct"
        },
        {
            "cname": "bgfx_uniform_info_t",
            "members":
            [
                {
                    "data_type": "char[256]",
                    "name": "name"
                },
                {
                    "data_type": "UniformType::Enum",
                    "name": "type"
                },
                {
                    "data_type": "uint16_t",
                    "name": "num"
                }
            ],
            "name": "UniformInfo",
            "type": "struct"
        },
        {
            "cname": "bgfx_attachment_t",
            "members":
            [
                {
                    "data_type": "Access::Enum",
                    "name": "access"
                },
                {
                    "data_type": "TextureHandle",
                    "name": "handle"
                },
                {
                    "data_type": "uint16_t",
                    "name": "mip"
                },
                {
                    "data_type": "uint16_t",
                    "name": "layer"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numLayers"
                },
                {
                    "data_type": "uint8_t",
                    "name": "resolve"
                }
            ],
            "name": "Attachment",
            "type": "struct"
        },
        {
            "cname": "bgfx_transform_t",
            "members":
            [
                {
                    "data_type": "float*",
                    "name": "data"
                },
                {
                    "data_type": "uint16_t",
                    "name": "num"
                }
            ],
            "name": "Transform",
            "type": "struct"
        },
        {
            "cname": "bgfx_view_stats_t",
            "members":
            [
                {
                    "data_type": "char[256]",
                    "name": "name"
                },
                {
                    "data_type": "ViewId",
                    "name": "view"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeBegin"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeEnd"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuTimeBegin"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuTimeEnd"
                },
                {
                    "data_type": "uint32_t",
                    "name": "gpuFrameNum"
                }
            ],
            "name": "ViewStats",
            "type": "struct"
        },
        {
            "cname": "bgfx_encoder_stats_t",
            "members":
            [
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeBegin"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeEnd"
                }
            ],
            "name": "EncoderStats",
            "type": "struct"
        },
        {
            "cname": "bgfx_stats_t",
            "members":
            [
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeFrame"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeBegin"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimeEnd"
                },
                {
                    "data_type": "int64_t",
                    "name": "cpuTimerFreq"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuTimeBegin"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuTimeEnd"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuTimerFreq"
                },
                {
                    "data_type": "int64_t",
                    "name": "waitRender"
                },
                {
                    "data_type": "int64_t",
                    "name": "waitSubmit"
                },
                {
                    "data_type": "uint32_t",
                    "name": "numDraw"
                },
                {
                    "data_type": "uint32_t",
                    "name": "numCompute"
                },
                {
                    "data_type": "uint32_t",
                    "name": "numBlit"
                },
                {
                    "data_type": "uint32_t",
                    "name": "maxGpuLatency"
                },
                {
                    "data_type": "uint32_t",
                    "name": "gpuFrameNum"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numDynamicIndexBuffers"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numDynamicVertexBuffers"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numFrameBuffers"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numIndexBuffers"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numOcclusionQueries"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numPrograms"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numShaders"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numTextures"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numUniforms"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numVertexBuffers"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numVertexLayouts"
                },
                {
                    "data_type": "int64_t",
                    "name": "textureMemoryUsed"
                },
                {
                    "data_type": "int64_t",
                    "name": "rtMemoryUsed"
                },
                {
                    "data_type": "int32_t",
                    "name": "transientVbUsed"
                },
                {
                    "data_type": "int32_t",
                    "name": "transientIbUsed"
                },
                {
                    "data_type": "uint32_t[5]",
                    "name": "numPrims"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuMemoryMax"
                },
                {
                    "data_type": "int64_t",
                    "name": "gpuMemoryUsed"
                },
                {
                    "data_type": "uint16_t",
                    "name": "width"
                },
                {
                    "data_type": "uint16_t",
                    "name": "height"
                },
                {
                    "data_type": "uint16_t",
                    "name": "textWidth"
                },
                {
                    "data_type": "uint16_t",
                    "name": "textHeight"
                },
                {
                    "data_type": "uint16_t",
                    "name": "numViews"
                },
                {
                    "data_type": "ViewStats*",
                    "name": "viewStats"
                },
                {
                    "data_type": "uint8_t",
                    "name": "numEncoders"
                },
                {
                    "data_type": "EncoderStats*",
                    "name": "encoderStats"
                }
            ],
            "name": "Stats",
            "type": "struct"
        },
        {
            "cname": "bgfx_vertex_layout_t",
            "members":
            [
                {
                    "data_type": "uint32_t",
                    "name": "hash"
                },
                {
                    "data_type": "uint16_t",
                    "name": "stride"
                },
                {
                    "data_type": "uint16_t[18]",
                    "name": "offset"
                },
                {
                    "data_type": "uint16_t[18]",
                    "name": "attributes"
                }
            ],
            "name": "VertexLayout",
            "type": "struct"
        },
        {
            "cname": "bgfx_encoder_t",
            "members":
            [],
            "name": "Encoder",
            "type": "struct"
        },
        {
            "cname": "bgfx_dynamic_index_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "DynamicIndexBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_dynamic_vertex_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "DynamicVertexBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_frame_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "FrameBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_index_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "IndexBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_indirect_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "IndirectBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_occlusion_query_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "OcclusionQueryHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_program_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "ProgramHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_shader_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "ShaderHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_texture_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "TextureHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_uniform_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "UniformHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_vertex_buffer_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "VertexBufferHandle",
            "type": "handle"
        },
        {
            "cname": "bgfx_vertex_layout_handle_t",
            "members":
            [
                {
                    "data_type": "uint16",
                    "name": "idx"
                }
            ],
            "name": "VertexLayoutHandle",
            "type": "handle"
        }
    ]
}